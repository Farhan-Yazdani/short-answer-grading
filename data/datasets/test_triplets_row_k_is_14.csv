,sentence1,sentence2,label
0,To simulate the behaviour of portions of the desired software product.,"Defined in the Specification phase a prototype stimulates the behavior of portions of the desired software product.  Meaning, the role of a prototype is a temporary solution until the program itself is refined to be used extensively in problem solving.",1.0
1,To simulate the behaviour of portions of the desired software product.,It is used to let the users have a first idea of the completed program and allow the clients to evaluate the program. This can generate much feedback including software specifications and project estimations of the total project.,0.6
2,To simulate the behaviour of portions of the desired software product.,To find problem and errors in a program before it is finalized,0.4
3,To simulate the behaviour of portions of the desired software product.,"To address major issues in the creation of the program. There is no way to account for all possible bugs in the program, but it is possible to prove the program is tangible. ",0.5
4,To simulate the behaviour of portions of the desired software product.,you can break the whole program into prototype programs to simulate parts of the final program,1.0
5,To simulate the behaviour of portions of the desired software product.,A program that stimulates the behavior of portions of the desired software product.,1.0
6,To simulate the behaviour of portions of the desired software product.,A prototype program provides a basic groundwork from which to further enhance and improve a solution to a problem.,0.4
7,To simulate the behaviour of portions of the desired software product.,it provides a limited proof of concept to verify with the client before actually programming the whole application.,0.4
8,To simulate the behaviour of portions of the desired software product.,It tests the main function of the program while leaving out the finer details.,0.4
9,To simulate the behaviour of portions of the desired software product.,To get early feedback from users in early stages of development.  To show users a first idea of what the program will do/look like.  To make sure the program will meet requirements before intense programming begins.,0.5
10,To simulate the behaviour of portions of the desired software product.,it simulates the behavior of portions of the desired software product,1.0
11,To simulate the behaviour of portions of the desired software product.,To ease the understanding of problem under discussion and to ease the understanding of the program itself,0.5
12,To simulate the behaviour of portions of the desired software product.,it simulates the behavior of portions of the desired software product,1.0
13,To simulate the behaviour of portions of the desired software product.,The role of a prototype program is to help spot key problems that may arise during the actual programing.,0.4
14,To simulate the behaviour of portions of the desired software product.,"Prototype programming is an approach to programming that enables one to take an organized approach to developing an effective program with minimal errors and a strategic pattern when solving a problem. i.e. book gave an example of a costumer withdrawing money from a bank, the approach that was taking on a pseudo code level during the OOA/Design lvl before proceeding into creating a solution. ",0.5
15,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"In RUP the stages in the software life cycle are influenced by the testing stage is:  Elaboration phase- refined progject vision, iterative devilopment of core system, development of system requirements, more accurate time and cost estimates.  Construction phase- iterative development of remaining system.  Transition phase-testing and deployment of the system.",0.6
16,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Refining the solution, Production and Maintenance are all influenced by the Testing stage. ",0.6
17,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Elaboration, Construction, and Transition are all affected by testing",0.4
18,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Refining, Production, Maintenance",0.7
19,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),Refining the solution,0.8
20,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"The second half of the Elaboration phase, Construction phase, and the Transition phase. ",0.5
21,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"The testing stage has a direct influence on the final version of a program, being as it is the debugging and finalization of a software revision.",0.3
22,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Depending on how the work is done, Testing is spread throughout the  process as to prevent errors from showing up later on due to lack of foresight. ",0.3
23,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Elaboration, construction, and transition.",0.5
24,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"All stages are influenced except setting the program requirements.  If a test fails, it can change the whole design, implementation, etc of a program as well as the final outcome.",0.3
25,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Refining, production, and maintenance",0.6
26,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Removing logical errors, testing for valid data, random data and actual data.",0.2
27,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),1- specification 2- design 3- risk analysis 4- verification 5- coding 6- testing 7- refining 8- production 9- maintenance,0.5
28,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Refining stage, Production stage, and Maintenance stage.  ",0.7
29,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"The Individual components and steps such as  analysis, design, and implementing code  as well as the entire system are tested for execution of the requirements identified during the analysis stage. i.e. Main output ",0.3
30,Abstraction and reusability.,The advantages is that OOP allows us to build classes of objects.  Three principles that make up OOP are:  Encapsulation- Objects combine data and operations.  Inheritance- Classes can inherit properties from other classes.  Polymorphism- Objects can determine appropriate operations at execution time.,0.5
31,Abstraction and reusability.,Some advantages are existing classes can be reused and program maintenance and verification are easier to accomplish.,0.7
32,Abstraction and reusability.,Object oriented programming allows programmers to use an object with classes that can be changed and manipulated while not affecting the entire object at once. The classes all hold attrubutes that affect the object.,0.2
33,Abstraction and reusability.,"Reusable components, Extensibility, Maintainability, it reduces large problems into smaller more manageable problems.",0.8
34,Abstraction and reusability.,Encapsulation-objects combine data and operations Inheritance- classes can inherit properties from other classes Polymorphism- Objects can determine appropriate operations at execution time,0.5
35,Abstraction and reusability.,"One of the main advantages is you can hide inner details a technique known by encapsulation. Objects combine the data and operations but you cannot see how it works.   Another advantage is you can reuse classes that have been defined earlier in the program, a method known as inheritance.   Finally another advantage is objects can determine appropriate operations at execution time a technique known as polymorphism. ",1.0
36,Abstraction and reusability.,"Modular, reusable code, allowing faster deployment of solutions, and a more general view of a solution.",0.9
37,Abstraction and reusability.,Data Abstraction and control... it is possible to isolate elements from other elements a lot easier and prevent tampering of data.,0.7
38,Abstraction and reusability.,Encapsulation - Objects use operations without knowing how the operation works. Inheritance - cuts redundancy by reusing earlier classes. Polymorphism - objects select the correct operation to use in the situation.,0.8
39,Abstraction and reusability.,"They make it easier to reuse and adapt previously written code and they separate complex programs into smaller, easier to understand classes.",0.9
40,Abstraction and reusability.,"Existing classes can be reused, Program maintenance and verification are easier ",0.7
41,Abstraction and reusability.,Existing classes can be reused Program maintenance and verifications are easy,0.8
42,Abstraction and reusability.,1- Existing classes can be reused 2- Program maintenance and verification are easier,0.7
43,Abstraction and reusability.,Information can be hidden. It is easier to debug. Programming is easier and more manageable.,0.7
44,Abstraction and reusability.,"Well for one encapsulation the values of the variables inside an object are private, unless methods are written to pass info outside of the object. As well as Inheritance where each subclass inherits all variables and methods of its super class.  Example in the book included obj clock and how obj alarm would still use clock from the first class. ",0.7
45,At the main function.,A C++ program will begin to execute at the main() function.,1.0
46,At the main function.,They begin in the main() function.,1.0
47,At the main function.,Int main(),1.0
48,At the main function.,main method,1.0
49,At the main function.,in the testing phase,0.0
50,At the main function.,They begin to execute at the funcion main().,1.0
51,At the main function.,C++ programs begin execution at main.,1.0
52,At the main function.,The main function.,1.0
53,At the main function.,The function main,1.0
54,At the main function.,"After loading the required include statements and libraries, the main method begins the execution.",1.0
55,At the main function.,main function,1.0
56,At the main function.,At main,1.0
57,At the main function.,they beging to excute at main,1.0
58,At the main function.,at the main function  int main() {},1.0
59,At the main function.,Within the main function,1.0
60,A location in memory that can store a value.," Variable is a location in the computer's memory, in which a value can be stored and later can retrieve that value.",1.0
61,A location in memory that can store a value.,"A variable is a location in the computer's memory where a value can be stored for use by a program. Each variable has a name, a value, a type and a size.",1.0
62,A location in memory that can store a value.,A named object that can hold a numerical or letter value,0.7
63,A location in memory that can store a value.,"It's a sybol or name for a value/number. Example: 'a_used_number' can stand for any given number, and the programmer can refer to that number by using the variable name.",0.8
64,A location in memory that can store a value.,A variable is a location in the computers memory where a value can be stored for use by a program,1.0
65,A location in memory that can store a value.,It is a location in the computer's memory where it can be stored for use by a program.,1.0
66,A location in memory that can store a value.,"A variable is the memory address for a specific type of stored data, or from a mathematical perspective, a symbol representing a fixed definition with changing values.",1.0
67,A location in memory that can store a value.,"a placeholder to hold information used in the program... for example: int can hold: 1, 2, 3, 4, 68, 72, 256, etc. float can hold: 1.54, 55.55, 1.24, 5.657, 8.8123, et. char can hold: A, B, C, D, E, F, !, 4, 5, 6, P, etc. ",0.9
68,A location in memory that can store a value.,a stored value used by the program,0.9
69,A location in memory that can store a value.,"A way to store different values into the program, such as numbers, words, letters, etc.",0.9
70,A location in memory that can store a value.,An object with a location in memory where value can be stored,0.7
71,A location in memory that can store a value.,Location in memory where a value can be stored.,1.0
72,A location in memory that can store a value.,it is a location in memory where value can be stored,1.0
73,A location in memory that can store a value.,A variable is the location in a computer's memory where a value can be stored for use by a program.,1.0
74,A location in memory that can store a value.,"Is a method or identifier I would say,  we use to bind a data object to memory location; which is then stored in a location that can be accessed when and manipulated later when the variable name is called. ",1.0
75,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Variables are declared where ever it is defined either inside a block locally or outside a block globally.,0.9
76,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Variables are declared before they are actually used. They can be declared before main() to use globally,0.8
77,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"For good programing practice they should be declared before main(), but should at least be declared before they are used.",0.5
78,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"They can be declared globally just before the main method (but also outside of it)... or variables can be subject to only the method they're scoped within, but would still be declared at the beginning of that method (but inside of it).",1.0
79,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),local variables are declared inside the method while global variables are declared in the body.,1.0
80,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),They are usually declared at the beginning before they can be used in the program. They always contain a name and a data type.,0.6
81,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Variables are usually declared at the beginning of a module of C++ code.,0.5
82,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"In the declaration of Functions, for statements, and while statements. in the body of If, For, while, do while, statements, in namespaces, headers, etc  ( almost anywhere. ) anywhere in the program, as long as it is on it's own line.",0.5
83,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),After declaration of the variable's data type.,0.2
84,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"anywhere in the code, can be at the top, or in the middle of the code, or anywhere.",0.6
85,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Before they are used.,0.4
86,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),inside the function scope and outside of the function scope in case of global variables,1.0
87,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),global variables are declared in the main function local variables are declared in any other function,0.8
88,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"Variables are usually declared at the very beginning of a C++ program, but can be declared any in the program as long as they appear before they are called upon.",0.8
89,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),It depends if it’s a global then they have to be declared out side the source code to be used in every scope however a local variable is one declared in a local function etc. which obviously doesn’t need to be declared outside the variable seeing how it is used for the function or block its being called for.,0.9
90,The block inside a do...while statement will execute at least once.,While loop used to execute a block of code as long as some condition is true.  A do...while loop used to execute a block of code as long as some condition is satisfied.  The difference between while and do...while is while loop tests its condition before the execution of its contents and the do...while loop tests its condition after the execution of its contents at least once.,1.0
91,The block inside a do...while statement will execute at least once.,"The termination condition of a do...while statement is usually at the end of the loop so it will run at least once. As for the while statement, if the condition is false to begin with, then the loop will never run.",1.0
92,The block inside a do...while statement will execute at least once.,A while loop will check the statement to make sure it is true before executing. A do while loop will execute before checking the statement to see if it should run again.,1.0
93,The block inside a do...while statement will execute at least once.,"A while statement will test the condition of the while loop FIRST - there is a chance the loop will never run. A do...while loop will ALWAYS run once, and then the while test will determine if it will run again.",1.0
94,The block inside a do...while statement will execute at least once.,a do while loop always executes once. A while loop's conditional statement has to be true for it to run.,1.0
95,The block inside a do...while statement will execute at least once.,The main difference between a do and a do...while statement is in a do...while statement is the statements in a do block are always executed atleast once.   The while statement will only execute if its condition is true.,1.0
96,The block inside a do...while statement will execute at least once.,"While tests for true first before running, do...while runs once first before checking.",1.0
97,The block inside a do...while statement will execute at least once.,"a do... while loop will always run through once, while an while loop performs a test before running through the loop.",1.0
98,The block inside a do...while statement will execute at least once.,A while statement tests the condition before it can start. A do...while statement loops through once before the condition is tested.,1.0
99,The block inside a do...while statement will execute at least once.,"A while loop terminates at the beginning of the loop, a do/while terminates at the end of the loop.",0.7
100,The block inside a do...while statement will execute at least once.,the loop body always executes at least once,0.7
101,The block inside a do...while statement will execute at least once.,"A do-while passes atleast 1 time before checking the condition, however, a while would fail to enter the loop if the condition fails in its first place.",1.0
102,The block inside a do...while statement will execute at least once.,"a while loop checks if the condition is true or not first, if it was true, it excutes the statement. a do.. while loop executes the statement before it checks the condition. if the condition was true it would excute the statement again. so a do...while loop would excute the statement atleast once.",1.0
103,The block inside a do...while statement will execute at least once.,NO ANSWER,0.0
104,The block inside a do...while statement will execute at least once.,"))     What is the main difference between a while and a do...while statement? The do while construct consists of a block of code and a condition. First, the code within the block is executed, and then the condition is evaluated, this is done until it is proven false. The difference between the While loop is it tests the condition before the code within the block is executed. ",1.0
105,Data members (attributes) and member functions.,Information telling the compiler what data members and member functions belong to the class.,1.0
106,Data members (attributes) and member functions.,"Since class is user defined, the body of the declaration can contain members, that can be either data or function declarations, and optionally access specifiers.  Example for specifiers would be public, private, and protected.  There is the keyword Class and the Class body is enclosed with brackets ({}). ",1.0
107,Data members (attributes) and member functions.,"It's specific class name, includes only information defined by that class... implementation details... etc.",0.6
108,Data members (attributes) and member functions.,data members and member functions.,1.0
109,Data members (attributes) and member functions.,Member functions and data members belonging to the class.,1.0
110,Data members (attributes) and member functions.,a public and private area that includes the functions and variables that are used in the class,0.9
111,Data members (attributes) and member functions.,A class definition typically includes function definitions.,0.6
112,Data members (attributes) and member functions.,"It begins with Class, followed by the class name, then usually a constructor, data members and member functions that delineates the class is included in any class's definition.",1.0
113,Data members (attributes) and member functions.,"A constructor, functions, and variables that are accessible to by that class, and possibly other classes depending on how they are done.",0.9
114,Data members (attributes) and member functions.,member funtions and data members,1.0
115,Data members (attributes) and member functions.,Data members and Member functions,1.0
116,Data members (attributes) and member functions.,data members and member functions,1.0
117,Data members (attributes) and member functions.,"the class name and its public data types such as constructors, methods, functions.",0.7
118,Data members (attributes) and member functions.,data members and member functions,1.0
119,Data members (attributes) and member functions.,Data and functions,0.9
120,Data members (attributes) and member functions.,"A class is an expanded concept of a data structure, it holds both the data and the functions being executed ",0.9
121,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"Data members are declared inside the class, but outside of any member functions. Unlike with local variables, each object of the class keeps its own copy of the data members stored in memory.",0.9
122,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Data member are variables that represent an attribute in a class definition.  Local variables declared in a function body cannot be used outside of that function body.  When a function terminates the values of its local variables are lost.,0.9
123,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"A data member is part of a C++ class or structure that stores data of a certain type... A local variable inside a member function is only available inside that function, and can be used to derive a desired outcome.",0.9
124,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,A local variable can only be accessed within the scope of its declaration.,0.7
125,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"A data member is globally accessible, while a local variable is only accessible inside the member function.",0.9
126,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,A variable inside a member function can only be accessed inside that member and a data member can be accessed throughought the program.,1.0
127,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"A data member is a more general term describing all objects instantiated within a member function.  ""Local"" in local variables refers more to the scope of a variable, which may be located in anything from a control structure to a class.  Local variables whose scope are in a member function are the same as data members of member functions.",0.4
128,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,A data member exists permanently in that program's memory as long as it's run.  A local variable inside a member function is temporal and only used to operate in the function and exists as long as the function is run.,0.7
129,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"The local variable is lost once it exits the block of code, while the data member is not.",0.9
130,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Data members are variables that are declared inside the class definition but outside of the bodies of the class member functions. Local variables can only be used within the function declaration.,0.9
131,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"The data member can be accessed outside of the class, whereas the local variable cannot.",0.8
132,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"Local variables cannot be used outside of that function body. When a function terminates the values of its local variables are lost. Where as data members are variables in a class definition, and they exist throughout the life of the object. ",1.0
133,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,a local variable in a member function has to be static. a data member can change its value freely.,0.4
134,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"data members   local variables are declared in a function definition’s body. they Cannot be used outside of that function body. When a function terminates, the values of its local variables are lost.   ",0.9
135,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,local variable is only available in the function.,0.9
136,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"a Data member is encapsulated within a class or object,  it is static and can be shared by all instances of that class.  however local variable's are only used from the function or block in which it is declared and not the whole class. other wise they would be called global variables. ",0.8
137,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","Unlike regular functions, constructors are only used to initialize an object’s data when it is created. Constructors must also be given the same name as the class and cannot return any values. ",1.0
138,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","A constructor typically used to intialize data members and allocate resources, for instance memory, files, etc.  Also a constructor cannot return values.  Functions are operations that maybe globally defined.",0.9
139,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is a method that starts new instances of a class. (Example: Employee employee1(parameters) starts a new instance of object of type Employee). A function is simply a module w/in a program that completes its single desired task.,0.6
140,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is called whenever a new object of that class is made.,0.7
141,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is a function used to initialize an object's data when it is created.,0.7
142,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",a constructor initialises everything so that nothing is left empty or with random varioubles and a function modifies those variables with data.,0.5
143,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","A constructor sets up the default values of variables when an object is instantiated, whereas a function allows interaction with that object.",0.8
144,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","A constructor is used to create an object that can be employed in the main function of a program.  This may or may not execute code along with it.  A function is a set of code that executes when called, but does not create a new object.",0.6
145,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","a constructor does not need a type, and it is used to initialize the variables.",0.7
146,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructors cannot return values,0.8
147,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor initializes values and a function usual performs some sort of operation.,0.5
148,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is a function used to initialize an object's data when it is created. It's call is made implicitly when the object is created and must be defined with the same name as the class. Constructor also cannot return a value like a function can.,1.0
149,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is used to create an instance of a class and has the same name as that class. A function cannot have the same name as a class and computes data.,0.8
150,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","a constructor cannot return values, its not even void. it is used to initialize an object's data when it is created. whereas, a function is created to do a specific task, and it can return values.",1.0
151,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor initializes an object. A function is part of an object.,0.5
152,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","constructor is a special block of statements called when an object is created, either when it is declared statically or constructed on the stack. However a function is a portion of code within a larger program, which performs a specific task and independent to the rest of the code. ",0.8
153,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When the class does not explicitly include a constructor.,1.0
154,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When no parameters are set is when a default constructor is used.,0.6
155,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When there are no arguments passed.,0.3
156,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when there is not one already for a specific class,1.0
157,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",Before the main function of the code.,0.2
158,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",whenevery you dont specifiy your own,1.0
159,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",C++ will create a default constructor when no other constructor is present.,1.0
160,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","When no constructor was specified in the constructor's class, but the class is instantiated in a program.",1.0
161,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","The Compiler creates this automatically for you, unless you specifically create one.",1.0
162,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","If a class does not explicitly include a constructor, the compiler creates one.",1.0
163,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When you do not provide your own constructor.,1.0
164,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When a class does not explicitly include a constructor.,1.0
165,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",C++ creates a default constructor during compilation if one is not provided.,1.0
166,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when the programmer does not explicitly include a constructor,1.0
167,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When one is not explicitly stated.,1.0
168,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","at the very beginning when you run a complier, matter a fact in C++ it generates its own default constructor for the class provided if no other constructors have been provided by user",1.0
169,Unlimited number.,"There is no limit to the number of constructors in a class because like functions, constructors can be overloaded.",1.0
170,Unlimited number.,It depends what type of class is being defined.  Typically you would have a constructor call for each object.,0.3
171,Unlimited number.,1,0.0
172,Unlimited number.,any number you want,1.0
173,Unlimited number.,"As many as you want, with different parameters.",1.0
174,Unlimited number.,infinite,1.0
175,Unlimited number.,"As many as are needed, depending on how many variables one wishes to directly modify or leave as default when instantiating an object.",1.0
176,Unlimited number.,"A very large amount of constructors can be created for any given class through overloading.  When two constructors with a different type or number of parameters are created, they are said to be overloaded, and C++ can recognize which constructor to use based on the type of the variables that are passed/returned.",1.0
177,Unlimited number.,"Theoretically unlimited, as long as they are defined by the programmer.",1.0
178,Unlimited number.,several,0.9
179,Unlimited number.,One,0.0
180,Unlimited number.,one,0.0
181,Unlimited number.,There can be infinite constructors as long as the signature is different.,1.0
182,Unlimited number.,you can overload constructors as you need,1.0
183,Unlimited number.,As many as the programmer wants to create.,1.0
184,Unlimited number.,as many as the user decides to use.,1.0
185,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function prototype tells the compiler the function name, return type and the number and type of parameters without revealing the implementations contained in the function definition.",1.0
186,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",Function prototype is a declaration.  Function definitions (w/multiple parameters) often require more than one piece of information. to perform their tasks.,0.6
187,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",A prototype shows only return types and necessary parameters. The definition includes names for those parameters and defines what the object is actually capable of doing.,0.9
188,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",prototype only tells the user what data types go into a function and what type is returned.,0.9
189,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","Function definitions are just that, the definition. The prototype is what the compiler uses to check that calls to function are correct.",0.4
190,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",a prototype does not include any actual code where the function has all the code that is executed in the program.,0.6
191,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function prototype lays out the name, return type, and the number and types of parameters the function expects to receive in a certain order.  The details for function prototypes are in the function definition.",1.0
192,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function definition is the code that defines the function placed in the {} brackets that determines that function's operation.  A function prototype shows the function's public interface without exposing implementation.  It shows name, return type and type of paramaters.",1.0
193,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",the Prototype creates a framework to call the function definition. While a function definition is where the function is actually programmed out and created into a final product.,0.9
194,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","Function prototypes tell the compiler the function names, its return type, and the types of its parameters where as, function definitions actually implement the member functions.",1.0
195,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",A function prototype just specifies parameters.  A function definition includes parameters and a code body.,0.8
196,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",Function prototypes describe the class's public interface,0.9
197,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A prototype only declares name, return type, and input type. A definition also defines the scope, variables, process, and return function ",0.9
198,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","in a function prototype you include the return type, the name of the function, and its parameters if any are needed.  in a function definition you write the code of what the function will do. ",1.0
199,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function definition contains all the code for a function to work. A function prototype just shows the output, input and function name.",0.9
200,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype describes a classes interface without reviling whatever is inside as for the function definition can't do that.,0.9
201,"To store a class interface, including data members and member function prototypes.",Header files separate files in which classes are defined and allow the compiler to recognize classes when used elsewhere.,0.7
202,"To store a class interface, including data members and member function prototypes.",No,0.0
203,"To store a class interface, including data members and member function prototypes.","To provide information about the contents of a library. It includes the definition of classes, declarations of functions, data types, and constants.",0.9
204,"To store a class interface, including data members and member function prototypes.",the header file shows the user what types go into and come out of a function but does not allow a user to manipulate the actual code for the function.,0.9
205,"To store a class interface, including data members and member function prototypes.",“Instruct” the compiler on how to interface with library and user-written components.,0.5
206,"To store a class interface, including data members and member function prototypes.",create a comon area to contain reusable functions.,0.6
207,"To store a class interface, including data members and member function prototypes.","#include ""hat.h""  allows the use of the hat container, so called from the act of pulling names from a hat.  The header file for hat includes functions for storage and retrieval of it's contents, mainly put(), peek(), and pull().",0.3
208,"To store a class interface, including data members and member function prototypes.",To hold reusable content or modules separate from the actual  source-code file that can be easily referenced and employed for different programs.,0.8
209,"To store a class interface, including data members and member function prototypes.","A header file is a cross communication method between source files, to help limit the size of each individual program. Without header files a program will be 1 large lump of code and thus fairly hard to debug and traverse.",0.7
210,"To store a class interface, including data members and member function prototypes.",Header files have reusable source code in a file that a programer can use.,0.5
211,"To store a class interface, including data members and member function prototypes.",To hide the definition and details of a class.  Also to help readability of the main C++ file.,0.7
212,"To store a class interface, including data members and member function prototypes.",To allow the compiler to recognize the classes when used elsewhere.,0.7
213,"To store a class interface, including data members and member function prototypes.","A header file declares a class, its data, and functions available through that class.",0.8
214,"To store a class interface, including data members and member function prototypes.",Allow compiler to recognize the classes when used elsewhere,0.7
215,"To store a class interface, including data members and member function prototypes.",To promote function reusuablitly,0.6
216,"To store a class interface, including data members and member function prototypes.",contains all the standard C++ library's i.e. string,0.2
217,The name of the function and the types of the parameters.,The function signature includes the name of the function and the types of its arguments.,1.0
218,The name of the function and the types of the parameters.,"A function signature consists of the function prototype.  This tells you the general information about a function, its name, parameters, what scope it is in, and other miscellaneous information.",0.9
219,The name of the function and the types of the parameters.,"Name, paramaters, scope, and other general function information",0.9
220,The name of the function and the types of the parameters.,It includes a function name and parameter list. Does not include return type. Function signatures must be different.,1.0
221,The name of the function and the types of the parameters.,input parameters and return type,0.6
222,The name of the function and the types of the parameters.,The name of the function and the types of its arguments.,1.0
223,The name of the function and the types of the parameters.,Includes the name of the function and the types of its arguments.,1.0
224,The name of the function and the types of the parameters.,"a return type, and input parameters",0.6
225,The name of the function and the types of the parameters.,The function signature includes the method name and the input types.,1.0
226,The name of the function and the types of the parameters.,The signature can include a result type and thrown errors.,0.4
227,The name of the function and the types of the parameters.,"The name of the function and the types of its arguments. This includes the number, type, and order the parameters appear in.",1.0
228,The name of the function and the types of the parameters.,the name of the function and the types of its arguments,1.0
229,The name of the function and the types of the parameters.,A function signature includes the name of the function and the types of its arguments,1.0
230,The name of the function and the types of the parameters.,"A function signature includes a function's return type, parameters and semi-colon.",0.6
231,The name of the function and the types of the parameters.,The portion of a function prototype that includes the name of the function and the types of its arguments,1.0
232,The name of the function and the types of the parameters.,name of function and types of arguments,1.0
233,The name of the function and the types of the parameters.,"it includes the name of the function, and the types of its arguments. it does not specify the function return type. Function in the same scope must have unqiue signatures. ",1.0
234,File scope.,Global variables have file scope.,1.0
235,File scope.,The scope of global variables are created by placing variable declarations outside any class or function definition.  Global variables retain their values throughout the execution of the program and they can be referenced by any function that follows their declarations or definitions in the source file.,0.5
236,File scope.,Global Variables can be used in any function as long as the appropriate .h file that holds the variable is included,0.8
237,File scope.,They can be accessed by any part of the program. It can be referenced by any function that follows the declarations or definitions in the source file.,1.0
238,File scope.,can be accesed by any classes that have and object of that variables class in it,0.6
239,File scope.,They have file scope when placed outside a function.,1.0
240,File scope.,File scope.,1.0
241,File scope.,Global variable can b accessed by any class wit an object in the variables class,0.6
242,File scope.,The scope of global variables is at the file level.,1.0
243,File scope.,it is accessible by all functions within a program,0.9
244,File scope.,They can be referenced by any function following their declaration or definition inside the source file.,1.0
245,File scope.,"globally, anywhere in the program.",0.9
246,File scope.,Global variables have a file scope,1.0
247,File scope.,The entire program.,0.9
248,File scope.,throught the programm,0.9
249,File scope.,can be referenced by any function that follows their declarations or definitions in the source file,1.0
250,File scope.,variables that exist throught the entire script. their values can be changed anytime in the code and fucntions.,0.9
251,It makes a copy of the function code in every place where a function call is made.,The inline keyword advises the compiler to copy the function's code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions.,1.0
252,It makes a copy of the function code in every place where a function call is made.,The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,0.6
253,It makes a copy of the function code in every place where a function call is made.,You declare your inline function in the header or before your int main(). You then can call that function at anytime in your main program quickly and easily.,0.4
254,It makes a copy of the function code in every place where a function call is made.,"It expands a small function out... making your code longer, but also makes it run faster.",0.8
255,It makes a copy of the function code in every place where a function call is made.,the function is not treated as a separate unit like other functions,0.7
256,It makes a copy of the function code in every place where a function call is made.,The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,0.6
257,It makes a copy of the function code in every place where a function call is made.,Ignores the inline qualifier and typically does so for all but the smallest functions.,0.6
258,It makes a copy of the function code in every place where a function call is made.,it treats them as the same function,0.4
259,It makes a copy of the function code in every place where a function call is made.,"Inline functions are copied in place, instead of being referenced.",1.0
260,It makes a copy of the function code in every place where a function call is made.,it generates a copy of the function's coding which eliminates calling the function,1.0
261,It makes a copy of the function code in every place where a function call is made.,It generates a copy of the function's code by by inserting it in the program.,0.9
262,It makes a copy of the function code in every place where a function call is made.,"tells the compiler to make a copy of function's code in place to avoid a function call.  it typically ignores it, except for the smallest functions.",1.0
263,It makes a copy of the function code in every place where a function call is made.,The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,0.4
264,It makes a copy of the function code in every place where a function call is made.,"Multiple copies of the function code are inserted into the program, making it bigger.",0.9
265,It makes a copy of the function code in every place where a function call is made.,Compiler generate a copy of the function's code in place (when appropriate) to avoid a function call,1.0
266,It makes a copy of the function code in every place where a function call is made.,it generates a copy of the functions code in place to avoid a function call,1.0
267,It makes a copy of the function code in every place where a function call is made.,"When the compiler inline-expands a function call, the function's code gets inserted into the caller's code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code — optimize the called code into the caller. ",0.9
268,It avoids making copies of large data structures when calling functions.,Passing by reference can eliminate the pass-by-value overhead of copying large amounts of data.,1.0
269,It avoids making copies of large data structures when calling functions.,"It is often more efficient to pass references, rather than large objects, to functions. This allows the compiler to pass the address of the object while maintaining the syntax that would have been used to access the object.",1.0
270,It avoids making copies of large data structures when calling functions.,You do not alter the original value of the variable that was passed.,0.6
271,It avoids making copies of large data structures when calling functions.,Don't have to make copies of stuff.,0.9
272,It avoids making copies of large data structures when calling functions.,you do not use unessesary memory space to copy variables between functions,1.0
273,It avoids making copies of large data structures when calling functions.,Gives called function the ability to access and modify the caller’s argument data.,0.7
274,It avoids making copies of large data structures when calling functions.,Gives called function the ability to access and modify the caller’s argument data directly.,0.7
275,It avoids making copies of large data structures when calling functions.,you don't make another copy and waste memory,1.0
276,It avoids making copies of large data structures when calling functions.,"Passing by reference eliminates the copying of large amounts of data, typical with pass by value.",1.0
277,It avoids making copies of large data structures when calling functions.,"Gives access to the caller data directly, also it allows for modifying the data.",0.7
278,It avoids making copies of large data structures when calling functions.,The original variable being referenced can be modified directly by the called function.,0.6
279,It avoids making copies of large data structures when calling functions.,gives function ability to access and modify the caller's argument data directly,0.7
280,It avoids making copies of large data structures when calling functions.,Gives the called function the ability to access and modify the caller's argument data directly.,0.6
281,It avoids making copies of large data structures when calling functions.,"Less overhead than passed by value, especially when using large numbers.",0.7
282,It avoids making copies of large data structures when calling functions.,It gives access and modify the caller's argument data directly. It eliminate the pass by value overhead of copying large amounts ofdata,1.0
283,It avoids making copies of large data structures when calling functions.,"if you pass by reference, you can modify the value as opposed to passing by value where you cannot change the value",0.7
284,It avoids making copies of large data structures when calling functions.,"Actual arguments are associated with dummy arguments when a function or subroutine is referenced. In a procedure reference, the actual argument list identifies the correspondence between the actual arguments provided in the list and the dummy arguments of the subprogram",0.6
285,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","The compiler distinguishes overloaded functions by their signatures. It encodes each function identifier with the number and types of its parameters to generate type-safe linkage, which ensures the proper overloaded function is called.",1.0
286,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","Overloaded functions are distinguished by their signatures, Name mangling or name decoration, and type-safe linkage ensures that proper overloaded functions is called and types of the arguments conform to tpes to the parameters.",1.0
287,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","By the type they are initilized with (int, char, etc.)",0.6
288,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","It selects the proper function to execute based on number, types and order of arguments in the function call.",1.0
289,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",overloaded functions must have the same return type but different input parameters,0.6
290,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","Is based on number, types, and order of arguments in the function call.",1.0
291,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","Compiler selects proper function to execute based on number, types and order of arguments in the function call.",1.0
292,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","they have to have same return type, but different input parameters",0.6
293,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",Overloaded functions are differentiated by their parameters.,0.9
294,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",it creates a set of candidate functions then a set of viable functions,0.6
295,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",The number and type of its parameters.,1.0
296,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",by their function signature,1.0
297,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","They have the same name, just different parameters.",0.7
298,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","They are differntiated by number, types and order of arguments in the function call.",1.0
299,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","Compiler selects proper function to execute based on number, types and order of arguments in the function call.",1.0
300,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",by the number and type of arguments,1.0
301,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",overloaded function simply invovles haing a method with the same name within the class. is used to implement a method for subclass which overrides in other words replaces the implementation of the super class. Overloading the concept of providing different meaning to a object based on the context of its presence. Overloading is one type of polymorphism and this is also a feature in programing.,0.6
302,"If the recursion step is defined incorrectly, or if the base case is not included.",Infinite recursion can occur when the base case is omitted or the recursion step is written incorrectly so that it never converges on the base case.,1.0
303,"If the recursion step is defined incorrectly, or if the base case is not included.","Infinite recursion is an infinite loop if the condition is not met.  Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case causes ""indefinite"" recursion, eventually exhausting memory.  ",1.0
304,"If the recursion step is defined incorrectly, or if the base case is not included.",Not having a base case that returns a base value.,0.8
305,"If the recursion step is defined incorrectly, or if the base case is not included.",Incorrect or missing base case. Must reduce to the base case. The function must get simpler each time it is run (converge to the base case).,1.0
306,"If the recursion step is defined incorrectly, or if the base case is not included.",no base case no change in values.,0.9
307,"If the recursion step is defined incorrectly, or if the base case is not included.",The recursive problem cannot be reduced to reach the base case.,0.9
308,"If the recursion step is defined incorrectly, or if the base case is not included.","Lack of defining a base case, or writing the recursion step incorrectly so that it does not converge on the base case",1.0
309,"If the recursion step is defined incorrectly, or if the base case is not included.","no base case, or the recursive calls do not converge to the base case",1.0
310,"If the recursion step is defined incorrectly, or if the base case is not included.","No base case, or an incorrectly written recursion step that does not converge on the base case will lead to infinite recursion.",1.0
311,"If the recursion step is defined incorrectly, or if the base case is not included."," not creating a base case, or in the case where the base case will never be met.",1.0
312,"If the recursion step is defined incorrectly, or if the base case is not included.",There is no base case. The recursion step doesn't reduce the problem during each recursive call.,0.9
313,"If the recursion step is defined incorrectly, or if the base case is not included.","no base case, as in a single return that does not include calling the function again.  a static value to end at.",0.7
314,"If the recursion step is defined incorrectly, or if the base case is not included.","Either omitting the base case, or writing the recursion step incorrectly so the it does not reach the base case can cause infinite recursion.",1.0
315,"If the recursion step is defined incorrectly, or if the base case is not included.",omitting the base case or writing the recursive call so that it does not converge upon the base case.,1.0
316,"If the recursion step is defined incorrectly, or if the base case is not included.","Either omitting the base case, or writing the recursion step incorerectly ",1.0
317,"If the recursion step is defined incorrectly, or if the base case is not included.",function is never allowed to reach the 'base case',1.0
318,"If the recursion step is defined incorrectly, or if the base case is not included.",recursion refers to situations in which functions call themselves. These types of functions are known as recursive functions. That being said Infinite recursion occurs when the function is designed in such a way as to call it self forever without stopping possible causes,0.6
319,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both iteration and recursion are based on control statements and involve repetition. They can both also occur indefinitely.,1.0
320,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both are based on a control statement         - Iteration-repetition structure         - Recursion-selection structure        Both involve repetition         -Iteration-explicitly uses repetition structure         -Recursion-repeated function calls        Both involve a termination test         -Iteration-loop-termination test         -Recursion-base case         Both gradually approach termination         -Iteration-modifies counter until loop-termination test fails         -Recursion-produces progressively simpler versions of problem        Both can occur indefinitely         -Iteration-if loop-continuation condition never fails         -Recursion-if recursion step does not simplify the problem,1.0
321,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Both rely on repetition, both have a base case, both can become an infinite loop. Anything recursive can also be solved with iteration.",1.0
322,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Both will repeat (loop) until a condition is met, and exit the loop. Both are capable of entering an infinite loop.",0.8
323,They both involve repetition; they both have termination tests; they can both occur infinitely.,anything you can do iterativly you can do recursively,0.6
324,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both are based on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.,1.0
325,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Both are based on a control statement, Both involve repetition, Both involve a termination test, Both gradually approach termination, Both can occur infinitely",1.0
326,They both involve repetition; they both have termination tests; they can both occur infinitely.,anything you can do recursively you can do iteratively,0.6
327,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Many problems can be solved by both iteration and recursion, and either may go into a condition of infinite execution if a termination test is omitted.",0.7
328,They both involve repetition; they both have termination tests; they can both occur infinitely.,"both based on control statement, involve repetition, and involve a termination test within loops",1.0
329,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both involve a termination test.   They use a control statement and repition to solve the problem.  They can also result in an infinite loop.,1.0
330,They both involve repetition; they both have termination tests; they can both occur infinitely.,"based on a control statement, involve repetition, involve a termination test.",1.0
331,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both are bases on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.,1.0
332,They both involve repetition; they both have termination tests; they can both occur infinitely.,"both based on a control statement, both involve repitition, both involve a termination test, both gradually approach termination, both can potentially occur infinetly.",1.0
333,They both involve repetition; they both have termination tests; they can both occur infinitely.,"both are based on a control statement, involve repetition and involve a termination test. both gradually approach termination, both can occur infinitely",1.0
334,They both involve repetition; they both have termination tests; they can both occur infinitely.,"repetition, termination test, eventually terminate, occur infinately",1.0
335,They both involve repetition; they both have termination tests; they can both occur infinitely.,"they both are able to do repetiive tasks. however recurisve calls itself with different parameters and defines and exit clause that is guaranteeed to be reached. Iterative includes a loop which iterates a pre-determined number of times, or checks for an exit clause every time through",0.7
336,"In the array declaration, or by using an initializer list.",You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable.,1.0
337,"In the array declaration, or by using an initializer list.",Pass the length along with the array or use a vector.,0.6
338,"In the array declaration, or by using an initializer list.","In the declaration (int array [x]) or with an initilizer (int array[]={0,1,2,etc.}",1.0
339,"In the array declaration, or by using an initializer list.","1. Declare the length of the array (int array[10];) 2. Initialize the array (int array[] = {0, 1, 2, 3}; //compiler will assume size of 4)",1.0
340,"In the array declaration, or by using an initializer list.",Specify an arrays size with a constant variable. And setting array elements with calculations.,0.7
341,"In the array declaration, or by using an initializer list.","statically, using {} and dynamically, using []",0.8
342,"In the array declaration, or by using an initializer list.",Static and dynamic.,0.5
343,"In the array declaration, or by using an initializer list.",manually inside the brackets or automatically via an initializer list,1.0
344,"In the array declaration, or by using an initializer list.","In a string you can specify with the strlen(arrayname) command. This gets the length of the string. Another way is with integers where you initiate the size from the start, ex array[40] specifying a possible length of up to 40. Then it is passed by an object the actual ammout in the array. Another way is to declare it in an initializing program. ",0.9
345,"In the array declaration, or by using an initializer list.",either initializing the array with a specific length or initializing an array while declaring its contents.,1.0
346,"In the array declaration, or by using an initializer list.",within the brackets or by using an initializer list.,1.0
347,"In the array declaration, or by using an initializer list.",specify the number of elements in the array declaration with a constant or using a constant variable for future scalability,0.8
348,"In the array declaration, or by using an initializer list.",with a number and with a variable,0.6
349,"In the array declaration, or by using an initializer list.",1-Initializing an array in a declaration with an initializer list 2-Specifying an arrays size with a constant variable,1.0
350,"In the array declaration, or by using an initializer list.","Initializing the size in the brackets: int a[100]; Initializing the length by assigning variables: int a[] = {1,2,3};",1.0
351,"In the array declaration, or by using an initializer list.","use an arraylist, or have your program ask the array how many elements it has. As an obj it it should have member length that is the number of slots it has. ",0.8
352,The strings declared using an array of characters have a null element added at the end of the array.,"Unlike in a string declared using type string, in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character.",1.0
353,The strings declared using an array of characters have a null element added at the end of the array.,"All strings represented by character arrays end with the null character. You declare an object of type string just like any other type, for example:  string s; ",1.0
354,The strings declared using an array of characters have a null element added at the end of the array.,type string is an array of chars that will make an array of single letter characters while an array of strings will be an actual array of words (or an array of char arrays),0.4
355,The strings declared using an array of characters have a null element added at the end of the array.,"They're basically the same, however, a string ends w/ a null character, denoting the end of the string (and the size). A char array has potential to be any size, so it must be declared or limited.",0.7
356,The strings declared using an array of characters have a null element added at the end of the array.,string declared used in an array of characters contains each character in the array and a special string-termination character called the null character versus the type string.,1.0
357,The strings declared using an array of characters have a null element added at the end of the array.,A char array reads a string as each individual character. A string literal array reads the entire string.,0.6
358,The strings declared using an array of characters have a null element added at the end of the array.,"Stings can only be modified by functions of the String class, an array of characters can be modified by the user",0.7
359,The strings declared using an array of characters have a null element added at the end of the array.,"if by type string, the array contains an additional terminating null character",0.8
360,The strings declared using an array of characters have a null element added at the end of the array.,strings with type string are just that. Strings. They are not part of an array list at all where as one declared by an array is actually an array of characters able to be pointed and detected.,0.6
361,The strings declared using an array of characters have a null element added at the end of the array.,array of characters need a termination character as well as size specification whether its explicit or implicit.,1.0
362,The strings declared using an array of characters have a null element added at the end of the array.,when using an array individual characters can be accessed and manipulated.,0.5
363,The strings declared using an array of characters have a null element added at the end of the array.,strings declared using an array of characters could result in data loss if character array not initialized large enough.,0.8
364,The strings declared using an array of characters have a null element added at the end of the array.,"an array is passed by reference therefore if an array of characters is changed, the memory is changed not just the variable",0.7
365,The strings declared using an array of characters have a null element added at the end of the array.,"an array of characters has one element a string doesnt have. it is the termination element, or ""null""",1.0
366,The strings declared using an array of characters have a null element added at the end of the array.,Strings declared using the type string can vary in length. Strings declared using an array of characters can not extend past the array length.,0.8
367,The strings declared using an array of characters have a null element added at the end of the array.,"array  it is the collection of similar data types ex:int a[10]  ten indicates the size of array. [ ] is index of array, we can give only integer values to array of a.  where as string mean collection of group of characters.  string declarations have a datatype usually causes storage to be allocated in memory that is capable of holding some predetermined number of symbols.    However  Arrays can be declared to contain values of any non reference data type. Multiple arrarys of the same type ",0.5
368,by reference.,Arrays are passed to functions by reference.,1.0
369,by reference.,#NAME?,1.0
370,by reference.,"you must pass the array and its size to the function. Ex. function(array, size);",0.8
371,by reference.,"Usually the same way you pass anything else... you do not have to specify the length of a char array, just pass it to the function by sending the name of the array.  Example: char str[20]; isPalindrome(str); // this sends the char array to the function isPalindrome.  Otherwise, would need to send the length of the array as well.",0.7
372,by reference.,Specify array name without brackets. Array size is normally passed as another argument so the function can process the specific number of elements in the array. Arrays are passed by reference. Individual array elements passed by value. Functions that take arrays as arguments.,1.0
373,by reference.,Arrays are passed by reference.,1.0
374,by reference.,specify the array name without brackets.,0.6
375,by reference.,by reference,1.0
376,by reference.,They are called by the function then the function must loop through the array to get the set of characters.,0.4
377,by reference.,specifying array name and passing as reference in an argument into the function,1.0
378,by reference.,1st you must specify the array name without brackets and then the array name and size are passed as two arguments in the function call.,0.8
379,by reference.,"arrays are passed by reference, passing the starting address of array. programmer specifies the array name without brackets and passes the array size as another argument so the function can process the specific number of elements in the array",1.0
380,by reference.,by reference only,1.0
381,by reference.,by refrence,1.0
382,by reference.,"function( int [], int length)",0.8
383,by reference.,"The function reads the variables, stores them. then returns the what ever the variable reads. The function then prints the content of the array. ",0.5
384,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",An array declared as static is not created and and initialized each time the function and it is also not destroyed when the function terminates.,1.0
385,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","A program intializes static local arrays when their declarations are first encountered.  If a static array is not initialized explicityly by the programmer, earch element of that array is intialized to zero by the compiler when the array is created.  Non-static array members cannot be initialized at all in C++.",0.8
386,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","a static array will only be initilized once, a non static array will be re-initilized once the program reaches the initilization line again.",1.0
387,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",An array declared as static is available from beginning of program to end. One w/o static declaration disappears if it is not accessed within the right scope.,0.9
388,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","All elements are initialized to zero if not explicitly initialized, this does not happen for automatic local arrays  ",0.9
389,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","All elements are initialized to zero if not explicitly initialized for a static array, while a non-static array is not initialized to zero.",0.9
390,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","A static array has a set size that cannot change. The data may not need all of the space assigned, or could go beyond the size.",0.8
391,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","A static member prevents naming conflicts (not put into global namespace) while allowing for information hiding (private, public).",0.6
392,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","Static arrays are those with a declared size, that is known to the program, whereas non-static arrays leave the size undeclared and open so it can be assigned later. Usually used for input purposes. ",0.6
393,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","its not created and initialized each time program calls the function, and is not destroyed every time the function ends in the program.",1.0
394,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","When we declare it static the array is not destroyed after the function is over.  When an array is not declared as static, the array is created and initialized every time a function calls it.",1.0
395,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",the static array exists for the duration of the program,0.9
396,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",an array declared as static can only be declared once,0.7
397,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",Only constants can be used to declare the size of automatic and static arrays Exists for the duration of the program Is initialized when its declaration is first encountered All elements are initialized to zero if not explicitly initialized,1.0
398,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",A static array cannot be changed in the program.,0.6
399,"The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","if they are declared fixed or static that means they can't change size once their storage has been allocated, however one that is not or dynamic arrarys can be resized.   ",0.6
400,"All the dimensions, except the first one.","When passing a multi-dimensional array, all dimensions must be specified except for the first dimension.",1.0
401,"All the dimensions, except the first one.",It depends what parameters you are passing in a multidimensional.  A multideminsional can have more than two dimensions.,0.7
402,"All the dimensions, except the first one.",all but the first,1.0
403,"All the dimensions, except the first one.",All of the dimensions must be specified.,0.7
404,"All the dimensions, except the first one.",Size of subsequent dimensions are required. Compiler must know how many elements to skip to move to the second element in the first dimension,0.9
405,"All the dimensions, except the first one.",Every dimension after the first.,1.0
406,"All the dimensions, except the first one.","the size of the first dimension does not need to be specified, but all other dimensions do.",1.0
407,"All the dimensions, except the first one.","when passing (in main) a multidimensional array to a function, no dimensions need be specified",0.4
408,"All the dimensions, except the first one.",as many as there are dimensions. Most commonly just rows and columns,0.7
409,"All the dimensions, except the first one.",all subsequent dimensions after the first dimension.  first is not needed to be specified.,1.0
410,"All the dimensions, except the first one.","all dimensions, excluding the first one.",1.0
411,"All the dimensions, except the first one.",all dimensions but the first,1.0
412,"All the dimensions, except the first one.",the first needs to be specified by size and the rest need only be stated( first like this [3] then [][][]),0.6
413,"All the dimensions, except the first one.",one,0.4
414,"All the dimensions, except the first one.",All subsequent dimensions after the first one.,1.0
415,"All the dimensions, except the first one.","Multi dimensional arrays are accessed using more than 1  index, one for each dimension at least. ",0.7
416,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",It starts with the second element and checks it to see if it is less than the element(s) to the left of it and if it is it inserts it into its corrected position.,1.0
417,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Compare two numbers at a time and swap until the entire list is sorted.,0.4
418,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Assume the first number is sorted, then move down the list and 'insert' the numbers you come across into the corresponding place on the sorted side of the list.",1.0
419,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Looking at the 2nd element move forward and place the element in the correct spot.,0.9
420,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Insertion sort removes an element from the data, and inserts it at the correct position in the already sorted list.",1.0
421,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Insertion sort progresses through a list of elements and determines where the next element should be inserted into an already sorted array starting with sorting and using the first two elements.,0.9
422,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Inserting array items in to their appropriate positions from smallest to largest at a pivot which starts on the second element of the array.,0.7
423,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",a comparison sort in which the sorted array is built one entry at a time,0.8
424,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Insertion sort is an algorithm where the first element of the array is in the sorted list, all the other pick one by one and taken from the unsorted array, to the sorted array.",0.9
425,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Every iteration of an insertion sort takes away an element from the input data, inserting it at the right position in the sorted list.",1.0
426,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","it takes the second element and swaps it with the 1st if it is less and keeps it there if its larger, then it goes to the third element and inserts it in the right places with respect to the first 2 elements and so on... ",1.0
427,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Starting with the first element in the array, each following element is put in place by determining if it is smaller or larger than the starting element.",0.8
428,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",you take each element and insert it in the correct position with respect to all the elements before it,1.0
429,"Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Insertion sort is a simple sorting algorithm, a comparison sort in which the sorted array (or list) is built one entry at a time.",0.8
430,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",It finds the minimum element in the array and swaps it with the first element then repeats this step swapping the minimum element with nth positions in the array.,1.0
431,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Find the lowest value and place it at the front, then find the next lowest and place it in front of the last value, etc.",0.9
432,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Cycle through the unsorted list, place the minimum in the next slot in the sorted list, and repeat.",0.9
433,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Find the smallest and put it in the current position till you get to the end.,1.0
434,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Selection sort finds the minimum value in the list, swaps it with the first value in the list, and repeats throughout the list.",0.9
435,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Find the smallest value in the list and make it the first element, then find the smallest value of the leftover list and make it the first element of the leftover list and continue until the list is sorted.",1.0
436,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Places the smallest item in the list at position 1, and then proceeds to each value until the last position of the ray is reached.",1.0
437,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",finds the smallest element and places in 1st position. then the process is repeated on the rest of the array.,1.0
438,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Selection sort is an algorithm that selects the larges item the array and puts it in its place; then select the next largest until the array is sorted,0.9
439,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Select the smallest number in the list and move it to the front of the list and then advance to the next number.,1.0
440,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","selects the minimum from the remaining elements of the array, and palces the miminum in the current position and moves to the next position",1.0
441,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","To put the biggest element at the end of the list and place the next highest element behind it, and so on.",0.7
442,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","you loop through the entire list, and for each iteration you find the smallest element and move it to the current position.",1.0
443,"Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Find the minimum value in the list swap it with the value in the first position; repeat the steps above for remainder of the list(starting in the second position.,1.0
444,N (the length of the array) operations achieved for a sorted array.,"Best case would be O(n) or n-1, because that's what it takes to scan the array and make one swap. The array would then be sorted and would take only 1 operation.",0.8
445,N (the length of the array) operations achieved for a sorted array.,Best case-1 Worst Case-N,0.4
446,N (the length of the array) operations achieved for a sorted array.,It will do (n) operations where (n) is the number of elements in the array. Best case is when all the elements are already sorted.,1.0
447,N (the length of the array) operations achieved for a sorted array.,Best case is all elements sorted. n-1.,0.8
448,N (the length of the array) operations achieved for a sorted array.,"n operations, where n is the number of items.",0.8
449,N (the length of the array) operations achieved for a sorted array.,"In the best case scenario of an already sorted list, insertion sort will progress once through the list.  So the number of operations is directly proportional to the number of elements in the list.  Also noted as O(n) in big o notation. ",1.0
450,N (the length of the array) operations achieved for a sorted array.,"Best case is N, while the worst case is N factorial.",0.6
451,N (the length of the array) operations achieved for a sorted array.,worst case its = O(n) time best case its = O(n^2) time,0.6
452,N (the length of the array) operations achieved for a sorted array.,O(n),0.7
453,N (the length of the array) operations achieved for a sorted array.,N number of times.  Where N equals the number of elements in the list.  Best-case scenario is that the elements in the list are already sorted.,1.0
454,N (the length of the array) operations achieved for a sorted array.,theta(n) the best case senario is that everything is already sorted,0.9
455,N (the length of the array) operations achieved for a sorted array.,n operations  The best case scenario is when all the numbers are in increasing order.,1.0
456,N (the length of the array) operations achieved for a sorted array.,the best case is if it only has to look through the list once. The best case scenario is when it goes through the list and doesn't have to make any changes (the list is already sorted),0.8
457,N (the length of the array) operations achieved for a sorted array.,very simplistic it moves one element from the list by one and inserting them in their correct position into a new slot then starting over. best case is (0)1,0.5
458,When the size of the array to be sorted is 1 (or 2),The best case is the same as the worst case O(n log n) for a recursive merge sort.,0.4
459,When the size of the array to be sorted is 1 (or 2),there is one object in the split array to sort.,1.0
460,When the size of the array to be sorted is 1 (or 2),The base case is when the length of the current array is 1.,1.0
461,When the size of the array to be sorted is 1 (or 2),Best case is one element.  One element is sorted.,1.0
462,When the size of the array to be sorted is 1 (or 2),"A list size of 1, where it is already sorted.",1.0
463,When the size of the array to be sorted is 1 (or 2),A list or array of only 1 element.,1.0
464,When the size of the array to be sorted is 1 (or 2),A single Element on the Array.,1.0
465,When the size of the array to be sorted is 1 (or 2),"if the array length is less than or equal to 1, then that array is returned to the other array and merged together",0.9
466,When the size of the array to be sorted is 1 (or 2),"if (right &gt; left)   {     mid = (right + left) / 2;     m_sort(numbers, temp, left, mid);     m_sort(numbers, temp, mid+1, right);      merge(numbers, temp, left, mid+1, right);   } ",0.4
467,When the size of the array to be sorted is 1 (or 2),The sequence of numbers has zero or one elements.,1.0
468,When the size of the array to be sorted is 1 (or 2),the array has one element,1.0
469,When the size of the array to be sorted is 1 (or 2),"When there is only one element in the array, or when the starting element in the array is the same as the ending element.",0.9
470,When the size of the array to be sorted is 1 (or 2),the size of the list being sent is &lt;= 1,0.9
471,When the size of the array to be sorted is 1 (or 2),O(n log n),0.4
472,A variable that contains the address in memory of another variable.,A data type whose value refers to another value stored elsewhere in the computer memory using its address.,0.9
473,A variable that contains the address in memory of another variable.,a name that represents actual location or value of a data type. int *bPtr points to an integer value.,0.9
474,A variable that contains the address in memory of another variable.,A variable that stores the address of another variable,1.0
475,A variable that contains the address in memory of another variable.,"It is like a variable however instead of holding data, it holds a location in memory.",0.9
476,A variable that contains the address in memory of another variable.,A pointer is a reference to the memory location of an object.,0.9
477,A variable that contains the address in memory of another variable.,"It is a variable that contains not only a *value but has a memory address associated with it, and can be moved along a string or an array by jumping up one memory address.",0.7
478,A variable that contains the address in memory of another variable.,Contains a variable's memory address as a value.,1.0
479,A variable that contains the address in memory of another variable.,An element that references a memory cell,1.0
480,A variable that contains the address in memory of another variable.,a variable that contains the address of another variable,1.0
481,A variable that contains the address in memory of another variable.,A pointer is a variable that contains a memory address of anther variable,1.0
482,A variable that contains the address in memory of another variable.,A variable that contains the memory address of another variable that contains a specific value.,1.0
483,A variable that contains the address in memory of another variable.,A pointer is a way to get at another object. Essentially it is a way to grab an instance of an object and then either pass that instance a message or retreive some data from that object. A pointer is actually just an address of where an instance is held in memory.,0.9
484,The memory address of its operand.,Returns the memory address of its operand.,1.0
485,The memory address of its operand.,The address of the where the data is stored: &b will return the address of b.,0.9
486,The memory address of its operand.,The & operator returns the address of a variable,1.0
487,The memory address of its operand.,the address of the variable in memory,1.0
488,The memory address of its operand.,The address operator returns the memory address of its operand.,1.0
489,The memory address of its operand.,"The memory address of operand, 0x000000 or something along those lines. ",0.9
490,The memory address of its operand.,The object's memory address.,0.9
491,The memory address of its operand.,returns the memory address of its operand,1.0
492,The memory address of its operand.,returns the address number of the specified variable,0.9
493,The memory address of its operand.,The & is a unary operator that returns the memory address of its operand,1.0
494,The memory address of its operand.,the address of the variable it is attached to,0.8
495,The memory address of its operand.,returns a pointer,0.7
496,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,Returns an alias/nickname for the object to which the pointer operand points.,1.0
497,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The * returns the value,0.8
498,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The * operator returns the dereferenced pointer variable (ie: it returns the value of whatever variable the pointer is pointing to),1.0
499,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,it returns the information in the address the pointer points to.,0.8
500,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The star operator returns the object at that memory location.,0.8
501,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The value of the object that the operand points to,0.9
502,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The value stored in the object being pointed to.,0.8
503,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,returns synonym for the object its operand points to,1.0
504,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,Returns synonym for the object its operand points to,1.0
505,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,It is unary operator that returns the value of the variable located at the address,0.8
506,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,a reference to a = variable,0.4
507,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,will return zero or many characters placed before the operator,0.4
508,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",An element b[3] can be referenced by using *( bPtr + 3) instead.,0.8
509,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",yes *(array +offset),0.8
510,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.","The name of an array is considered to be a pointer in C++, and can be passed as such in functions parameters. Declaring int a[10]; creates a pointer ""a"" which stores the address of a[0].",0.7
511,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",*f[3],0.5
512,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.","The pointer to the array will initially point to the first element of that array.  When the pointer is incremented, it will point to the next element, and so on.",0.7
513,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",Takes the number of array elements and points to each at a time,0.4
514,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",The array can act as a pointer or be referenced by a pointer.  *(arrayPtr + 3) or *(array + 3),0.8
515,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",using the star operator.   array: b[n] can be accessed by *(bpointer +n),0.9
516,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.","by referencing a pointer and referring to other pointers relative to the first pointer(pointer+1, pointer +2, etc)",0.6
517,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",&[b3] is as bptr + 3. Array can be treated as pointer,0.7
518,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",a[i] = *(a+i),0.8
519,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",multi-dimensional array,0.2
520,The size in bytes of its operand.,Returns the size of the array in bytes during the program compilation.,0.9
521,The size in bytes of its operand.,The byte size of the date stored ina variable.,0.9
522,The size in bytes of its operand.,sizeof returns the size of the operand in bytes,1.0
523,The size in bytes of its operand.,the size of the information in bits.,0.5
524,The size in bytes of its operand.,sizeof returns the size in bytes of the respective object.,0.9
525,The size in bytes of its operand.,"The size of an operand in bytes. Used with variable names, type names, and constant values",1.0
526,The size in bytes of its operand.,the size in bytes needed to store the object in memory,0.9
527,The size in bytes of its operand.,the sizeof operator returns the size in bytes of an array parameter,0.8
528,The size in bytes of its operand.,returns the size in bytes of the specified data,0.9
529,The size in bytes of its operand.,Return size of operand in bytes,1.0
530,The size in bytes of its operand.,the total number of bytes of an object.,0.9
531,The size in bytes of its operand.,"it yields the size in bytes of the operand, which can be an expression or the parenthesized name of a type",0.8
532,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",Pass-by-value or pass-by-reference.,0.5
533,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",by address &bPtr or directly bPtr.,0.5
534,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Nonconstant pointer to nonconstant data, constant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to constant data. ",1.0
535,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",pass by value and pass by reference with reference or pointer arguments.,0.5
536,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",nonconst -&gt; nonconst const -&gt; nonconst nonconst -&gt; const const -&gt; const,1.0
537,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Non-constant pointer to non-constant data, non-constant pointer to constant data, constant pointer to constant data, constant pointer to non-constant data.",1.0
538,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",Pass by reference with reference arguments. function(int &)  Pass by reference with pointer arguments. function(int *),0.5
539,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",1. nonconstant pointer to nonconstant data. Its delcaration does no include  const qualifier. 2. nonconstant pointer to constant data. Provides the performance of pass-by-reference and the protection of pass-by-value 3. Constant pointer to nonconstant data.  4. Constant pointer to constant date.,1.0
540,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",Nonconstant pointer to nonconstant data Nonconstant pointer to constant data Constant pointer to nonconstant data Constant pointer to constant data,1.0
541,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",There are four way to pass pointer to a function 1. non constant pointer to non constant data 2.non constant pointer to  constant data. 3. constant pointer to non constant data. 4. constant pointer to  constant data.,1.0
542,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,1.0
543,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","there are only two ways to pass something, by value and by reference. Use of dot or pointer operators within the receiving function and use of '&' operator inside the passing function",0.5
544,The address of the location in memory where the function code resides.,It contains the address of the function in memory.,1.0
545,The address of the location in memory where the function code resides.,a pointer to a function,0.7
546,The address of the location in memory where the function code resides.,"A pointer to a function itself, contains the address of the function and can be used to call that function",1.0
547,The address of the location in memory where the function code resides.,a pointer that contains the address of a function,1.0
548,The address of the location in memory where the function code resides.,Points to the memory address of a function.  Kind of like breaking a branch off of a tree object and hitting other objects with it.,1.0
549,The address of the location in memory where the function code resides.,Pointer variables that point to function addresses.,1.0
550,The address of the location in memory where the function code resides.,Contains the address of the function in memory.,1.0
551,The address of the location in memory where the function code resides.,pointers that contain the addresses of functions.,1.0
552,The address of the location in memory where the function code resides.,a pointer that contains the address of the function definition,0.9
553,The address of the location in memory where the function code resides.,Function pointer is a pointer to a function. function pointer contains address of functions,1.0
554,The address of the location in memory where the function code resides.,a pointer that contains the address of a function in memory.,1.0
555,The address of the location in memory where the function code resides.,"When dereferenced, a function pointer invokes a function, passing it zero or more arguments just like a normal function. In programming languages like C, function pointers can be used to simplify code, such as replacing large switch statements.",0.8
556,A collection of elements that can be allocated dynamically.,"A sequence of nodes, each containing data fields (specified by programmer) and pointer(s) which can point to the next or previous nodes.",0.9
557,A collection of elements that can be allocated dynamically.,A list of items linked together.  Each item is linked to its successor.,0.9
558,A collection of elements that can be allocated dynamically.,A linked list is a chain of nodes that each store a single piece of data and pointer variables that point to other nodes in the list.,0.9
559,A collection of elements that can be allocated dynamically.,Information in memory linked to the next piece of information and can only be linked forwards and not backwards.,0.7
560,A collection of elements that can be allocated dynamically.,A linked list is a data structure containing one or more data elements with a pointer to the next node.,0.9
561,A collection of elements that can be allocated dynamically.,A data type that contains a pointer to at least the next  element in a list.,0.9
562,A collection of elements that can be allocated dynamically.,Each component contains a Node - a data item and a pointer to the next item in the list,0.9
563,A collection of elements that can be allocated dynamically.,"An array based list that uses an implicit ordering scheme, often using pointers.",0.5
564,A collection of elements that can be allocated dynamically.,"A linked list is a collection of Objects each containing at least one data member, and a pointer to the next object in the list (and the previous object in the case of a doubly linked list)",0.9
565,A collection of elements that can be allocated dynamically.,its a list of pointers that are linked 2 each other. every pointer points to the next pointer which has the next element,0.9
566,A collection of elements that can be allocated dynamically.,linear collection of self-referential nodes connected by pointers.,0.8
567,A collection of elements that can be allocated dynamically.,"A linked list is one of the fundamental data structures, and can be used to implement other data structures. It consists of a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes.  ",0.9
568,The linked lists can be of variable length.,Arrays must be of a defined size... elements can be added to a linked list w/o defining any size.,1.0
569,The linked lists can be of variable length.,You can expand when you need it.  You do not have to predetermine the size.,1.0
570,The linked lists can be of variable length.,Linked lists are able to grow and shrink in size as needed,1.0
571,The linked lists can be of variable length.,There is no limit as to how many you create where an array can only hold a given amount of information.,0.6
572,The linked lists can be of variable length.,"Linked lists can be grown dynamically, items don't require shifting, and they have a greater awesome factor than that of arrays.",1.0
573,The linked lists can be of variable length.,"Nearly infinite size, limited only by system memory and also the ability to expand the size dynamically.",1.0
574,The linked lists can be of variable length.,"They grow as needed, while arrays are of fixed size.",1.0
575,The linked lists can be of variable length.,Linked lists can grow and shrink as you need them to.  Arrays have a fixed size.,1.0
576,The linked lists can be of variable length.,"A linked list may be increased in size as needed, while an array's size is set when it is created",1.0
577,The linked lists can be of variable length.,its resizeable,1.0
578,The linked lists can be of variable length.,Linked lists do not have a set size and can grow or shrink as needed.,1.0
579,The linked lists can be of variable length.,The size of array is restricted to declaration. Insertion/Deletion of values in middle of array is not possible.,1.0
580,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","An array is capable of accessing any part of that array based on the index. The link list must be traversed from the beginning or the end, that is, data can only be accessed if it is adjacent to the previous or next nodes.",1.0
581,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",You have to keep up with the head of the list.,0.4
582,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Arrays are easier to implement and require less memory,0.7
583,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",you can go forwards and backwards and point to any piece of data at any given time where linked lists have to point to the next piece of data.,0.6
584,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Arrays, being fixed, are less error prone.",0.4
585,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","direct access to elements, and speed, linked lists have increased search times to access elements even if the list is sorted. ( like getting the last element without a pointer directly to the end of the list. )",0.9
586,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Array items are accessed directly with equal access time,1.0
587,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",You can access specific elements quickly in an array.  In a linked list you must traverse the list to get access the same element.,1.0
588,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Any entitiy in an array may accessed immediately, whereas a linked list must be traversed one item at a time because each object only points adjacent objects",1.0
589,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Array-based implementations require less memory than a pointer-based ones,0.7
590,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","You can go up and down an array , but you can only go one direction while traversing a linked list.",0.6
591,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Array size is fixed. But Linked is not fixed, data is also accessed quicker in array list, also memory requirement is less and no pointers required. Arrays have random access and less overheads compared to Linked list have sequential access only with too much overheads and no cache memory support. On the other hand, arrays allow random access, while linked lists allow only sequential access to elements. Singly-linked lists, in fact, can only be traversed in one direction.",1.0
592,By reference.,Pass-by-reference,1.0
593,By reference.,Passed as a pointer to the head.,0.8
594,By reference.,Passing the head pointer of a linked list to a function gives that function access to all nodes of that linked list,0.9
595,By reference.,not answered,0.0
596,By reference.,"The linked list object contains the head, through which the other elements are accessible.",0.7
597,By reference.,as a pointer node.,0.6
598,By reference.,A method with access to a linked list's head pointer as access to the entire list,0.8
599,By reference.,the head pointer is passed to a function as a reference argument.,1.0
600,By reference.,"linked lists are passed by reference, specificly the Head pointer",1.0
601,By reference.,by refrenece,1.0
602,By reference.,By passing the head pointer and going through the list as needed inside the function.,0.8
603,By reference.,"Linked lists permit insertion and removal of nodes at any point in the list in constant time,[1] but do not allow random access. ",0.3
604,The last element in a circular linked list points to the head of the list.,"On a circular linked list, the end element points to the head, thus making the circle. A basic link list has nothing pointing to the head, and the last element points to null.",1.0
605,The last element in a circular linked list points to the head of the list.,The last item in the list points to the head,1.0
606,The last element in a circular linked list points to the head of the list.,"In a circular linked list, the last node points back to the first node, there is no NULL",1.0
607,The last element in a circular linked list points to the head of the list.,Basic linked list points to a NULL at the end and circular points to the head at the end.,1.0
608,The last element in a circular linked list points to the head of the list.,"The circular linked list's tail points to the head, whereas the basic linked list's tail points to a NULL.",1.0
609,The last element in a circular linked list points to the head of the list.,"how to determine the end of the list, in basic linked lists the last element links to a null pointer, while circular linked lists link to the head element at the end.",1.0
610,The last element in a circular linked list points to the head of the list.,"No Node in a circular linked list contains NULL, the last Node points pack to a Node within the list.",1.0
611,The last element in a circular linked list points to the head of the list.,No node in a circular linked list contains NULL.,0.7
612,The last element in a circular linked list points to the head of the list.,"In a regular linked list the last object points to NULL. In a circular linked list, the last object points back to the beginning of the list",1.0
613,The last element in a circular linked list points to the head of the list.,"in a circular linked lists, the last element points to the first",1.0
614,The last element in a circular linked list points to the head of the list.,"A circular linked list does not have a last element. Instead, it's last item points to the head of the list.",1.0
615,The last element in a circular linked list points to the head of the list.,"In the case of a non circular link list, if you are at the last node of the list and u want to move to first u need to go to one, step back till u reach to first. But in circular link list from last to first you need to make only one move.  In a single link list u can move only in one direction but in double link list u can move in any direction back or forward or forward.  ",0.7
616,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","Doubly-linked lists can traverse backwards, though they still cannot access data at any point in the list, it can be shorter to traverse backwards.",0.7
617,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can traverse the list in reverse.,0.7
618,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",Doubly linked lists can be traversed in both directions,0.7
619,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can point both forwards and backwards,0.7
620,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",Doubly linked lists allow backward movement through the nodes.,0.7
621,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",ability to backtrack through a list.,0.6
622,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can move forwards and backwards in the double-linked list. Basic only moves forwards.,0.7
623,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",each node points to both its predecessor and its successor.,0.7
624,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","A doubly linked list can be traversed either direction, while a normal linked list can only be traversed from start to finish",0.7
625,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","given a node in the list, one can navigate easily in either direction",0.8
626,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can traverse the list both forward and backwards.,0.7
627,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","The primary disadvantage of doubly linked lists are that (1) each node requires an extra pointer, requiring more space, and (2) the insertion or deletion of a node takes a bit longer (more pointer operations).",0.4
628,Extra space required to store the back pointers.,"Need more memory to store ""previous"" pointers.",1.0
629,Extra space required to store the back pointers.,You have to keep up with where you are and you have to consider the predecessor and successor connections when inserting/deleting.,0.6
630,Extra space required to store the back pointers.,"Each node requires an extra node, requires more memory, and is more difficult to insert and remove individual nodes",1.0
631,Extra space required to store the back pointers.,They use more memory and you have to make 2 pointers and update 2 pointers each time you change the list.,1.0
632,Extra space required to store the back pointers.,"Each node requires an extra pointer (space requirements increased), Insertion or deletion of a node takes a longer (more pointer operations).",1.0
633,Extra space required to store the back pointers.,increased actions to add and remove elements to the linked list.,0.6
634,Extra space required to store the back pointers.,"Inserting and deleting in a double-linked list is more involved, and has special cases at the beginning and end.",0.6
635,Extra space required to store the back pointers.,"each node requires an extra pointer, taking up more storage.  insertions and deletions require more pointer operations.",1.0
636,Extra space required to store the back pointers.,The process of adding and removing Nodes in a Doubly linked list is more complex than in a basic linked list,0.7
637,Extra space required to store the back pointers.,"1- each node requires an extra pointer, requiring more space 2- the insertion or deletion of a node takes a bit longer, more pointer operations",1.0
638,Extra space required to store the back pointers.,It takes up twice the storage needed.,1.0
639,Extra space required to store the back pointers.,not answered,0.0
640,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A list in which only the top (or last item added) can be modified.,0.9
641,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",a stack is a data structure that uses push to insert an item and pop to remove ad item. The stack use a last in first out structure for inserting and removing items.,1.0
642,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A data structure that stores data using LIFO.,1.0
643,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","a data type that stores a set of elements in a certain order, last in, first out.",1.0
644,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","a stack is an Abstract data type which operates on a last in first out basis for storing a list of objects, and does not support ( at least in the pure stack) peeking at a element without removing the rest of the stack first.",1.0
645,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",Stores a set of elements in a particular order based on the principle of Last In First Out (LIFO).,1.0
646,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",An abstract data type that stores a set of elements in a particular order.,0.5
647,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",a collection of data to be executed in the order of last in first out,1.0
648,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","A stack is a data structure that allows data members to be added or removed one at a time, and in order. They are a ""Last in First Out"" structure.",1.0
649,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",is a list of element where the first one to be removed is the last one inserted,1.0
650,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A data structure that puts elements in a list and only allows the user  access to the last element.,0.9
651,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","A storage container that holds objects in a certain order, which has a LIFO priority",1.0
652,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","Stacks are a type of container adaptors, specifically designed to operate in a LIFO context (last-in first-out), where elements are inserted and extracted only from the end of the container.",1.0
653,push and pop,push and pop.,1.0
654,push and pop,push (insert an item) pop (remove an item),1.0
655,push and pop,Adding a new item and removing the item,1.0
656,push and pop,pop and push,1.0
657,push and pop,push ( to add to a item the Stack) Pop  ( to pull the last item added from an array. ),1.0
658,push and pop,pop and push,1.0
659,push and pop,Push and Pop,1.0
660,push and pop,"push, which adds an element to the stack... and pop which takes an element off the stack",1.0
661,push and pop,"Push and Pop, which add and remove data from the stack, respectively.",1.0
662,push and pop,pop - to remove item push - to insert an element,1.0
663,push and pop,Pop and push,1.0
664,push and pop,push - adds an item to the top of the stack pop - removes the top item from the stack,1.0
665,push and pop,push and pop. Push adds a given node to the top of the stack leaving previous nodes below. Pop removes and returns the current top node of the stack,1.0
666,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",Use a pointer that always points to the end of the array list for push/pop modifications.,0.9
667,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",if you used an array to implement a stack when you add an element just add it to the end of an array and remove items from end of array also.,0.9
668,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",You predetermine the size of the stack as you would an array.  This type can not grow.,0.5
669,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Make an array, make the bottom at spot 0, make the last spot in the array the top, and increment top when you ad",0.9
670,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","for efficiency it is easiest to implement the left to right method, with the right most item being the one that is retrieved when a pop is performed, and a push places an object on the furthest element.",0.7
671,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Create an array based on a pre-defined size N There can't be more elements than N.  Bottom stack element stored at element 0 last index in the array is the top  Increment top when one element is pushed, decrement after pop",0.9
672,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Create an array, size N.  N++ when one element is pushed.  N-- when one element is popped.",0.8
673,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",define an array and keep track of a pointer to the last element as items are added,0.8
674,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","By allocating an array of predetermined size, and an integer to track the top element of the stack. The bottom member of the stack will go in element 0 of the array, and for each element pushed the ""top"" tracking integer is incremented.",0.9
675,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",you store the stack in the array but you have to keep in mind the first element,0.6
676,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",You keep track of the last item entered into the array and do not  allow the user access to the other parts of the array.,0.8
677,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","by having a max number of elements, allocating an array with that number of elements, storing the elements starting at 0, and keeping track of how many elements are currently in the list",0.8
678,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Stack usually holds a bunch of items with the same type, therefore u can use an array, to hold the content of the stack and an integer top that holds the index of the element at the top of the stack. u Choose an array size. Then the sequence of operations used. u have to decide what data types are needed for this stack data structure. ",0.6
679,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Use the head as the top of the stack, only modify the head when you push/pop... push would add a new item to the head, pop would remove the item from the head.",0.9
680,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",you implement a stack with a list by changing the pointer to the first element of the list to the new item and move the pointer from the top of the stack to the next item when removing an item.,0.9
681,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",You dynamicly create space as the stack grows.  The stack can be as long as you need.,0.5
682,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","make a list, make the bottom the head, add on the end and make the end top",0.7
683,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","have the head of the list be the last item added, and a push just adds a new head.",0.9
684,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Create a new list.  Pop elements in the stack as needed.  Push the stack to remove items, unless the stack is empty.  The top item is at the head of the list. The last item is at the end.",0.9
685,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",Elements are only inserted and removed from the head of the list.  There is no header node or current pointer.,0.9
686,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",use a linked list and keep track of a pointer that points to the first item,0.8
687,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","A singly linked list can already be easily used for LIFO data storage. Members of a stack can simply be pushed and popped from a list, the first item in will be the last out.",0.9
688,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",the top is the first pointer.,0.6
689,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Keep a pointer pointing to the last element entered at the front of  the array and move the pointer ""back"" when you delete an element.",0.5
690,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","have a linked list, and for each push, add an item onto beginning of the list, and for each pop remove the first element in the list.",1.0
691,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Using a linked list is one way to implement a stack so that it can handle essentially any number of elements. It is usually convenient to put a data structure in its own module, thus, you'll want to create files stack.h and a stack.c",0.4
692,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",In postfix notation.,0.8
693,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",computers usually convert infix expressions to post fix expression and evaluate them using a stack.,1.0
694,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",they are converted to postfix,1.0
695,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",in postfix format,0.8
696,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","i have an hard time explaining this so i'll show how infix is evaluated instead. Start with an infix expression, like,  (((5+2)*5)+(400/(2+3))), and  push items until you get a "")"" and once that happens, perform the operations until you reach an ""(""... with that complete, you will now have  ((7*5)+(400/(2+3))) as now the expression that will be evaluated... perform last step again... (35+(400/(2+3))) is now the stack.... repeat agian... (35+(400/5)) is now the stack after that.... repeat... (35+80) is now the stack, repeat again... 115 is now the stack, and is returned.",0.5
697,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",The infix expression is converted to postfix form,1.0
698,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",infix expressions are converted to postfix expressions before they can be evaluated by a computer.  Operands stay in the same order.  Operators always follow the operands.,1.0
699,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",infix expressions are pointers evaluated by reference to the memory location,0.3
700,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",computers convert infix expressions to postfix form before evaluation,1.0
701,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","When an operand is entered, the computer Pushes it onto a stack When an operator is entered, the computer Applies it to the top two operands of the stack Pops the operands from the stack Pushes the result of the operation onto the stack",0.8
702,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",Computers convert an infix expression into a postfix expression. They then push the numbers onto a stack and pop them out as they are needed.,1.0
703,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","they are transformed into post-fix expressions, then evaluated with a stack.",1.0
704,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","Writing arithmetic expressions is called infix notation.  This is because a binary operator (like '+') is written in between its two operands (as in ""a + b"").  There are two alternative forms of notation used in certain situations.  One is prefix notation, in which an operator is written before its operands.  In prefix notation, the sum of a and b is written ""+ a b"".  This is the notation used to write function calls in mathematics and computer science.  It is also used in the Lisp and Scheme programming languages.  In postfix notation, an operator is written after its operands.  The sum of a and b is written ""a b +"".  (You may have seen this as ""reverse Polish notation"".)  Postfix notation forms the conceptual basis for the way that arithmetic expressions are evaluated by a computer.  One important characteristic of both postfix and prefix notations is that they are unambiguous; no parentheses are needed to indicate the order of operations. ",1.0
705,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Pop each item off the top until you find what you are looking for. If the stack ends up empty and you never found the item, then it does not exist in the stack. It may also be necessary to save the popped values in case you want to recreate the stack.",1.0
706,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","if the stack is implemented using an array you could simply search the array for the item. If the stack is implemented using a linked list you would have to pop the values off of the stack until either the value is found or the stack is empty, you would then have to have the items put back into the list.",0.9
707,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","You need to pop each item on the stack and compare the item.  Once the item is found, no more items need to be removed.",0.7
708,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",pop and push,0.6
709,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Depends on the type of stack, on a true stack you will haft to pop all of the elements of the stack until you find the element you want, and then after that you will need to push all the elements that where removed back in to the stack in the order that they where removed.  With a Java style stack, where there is a peek function, it will return the element you wanted instead of requiring you to perform all the excessive actions that are required from a true stack.",1.0
710,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",if top item != given element pop the stack. Repeat until item is found or stack is empty,0.7
711,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","createStack, push, isEmpty, pop, and a boolean return value.",0.6
712,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",you would have to traverse the stack popping each element to search it,0.7
713,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",Pop each element off the stack (and into another stack for storage) until the desired element is found.,0.8
714,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",to pop elements then push them back,0.9
715,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",A function to keep track of the elements popped and a function to put  the popped elements backinto the function.,0.9
716,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",you would need to perform a search through the list of elements (i dont really understand what this question is asking....its not very clear?),0.3
717,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",StackPush() StackPop() StackIsEmpty(),0.6
718,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",An ADT whose first inserted item is the first item removed. This uses the FIFO idea where items enter a queue at its back and leave at its front.,1.0
719,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","Last in, last out architecture. It works the same way a line at the bank would work, the person that's been waiting the longest gets served first.",1.0
720,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",a queue is a data structure that stores elements in a First in First out order.,1.0
721,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",Like a linked list but first in first out,0.9
722,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","A first in, first out Abstract Data type that can be used to store values.",1.0
723,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","Stores a set of elements in a particular order with a First In, First Out principle",1.0
724,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","a finite ordered list with zero or more elements, based upon First In First Out",1.0
725,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",a data structure that performs operations in the order of first in first out FIFO,1.0
726,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","A Queue is a ""first in first out"" data structure, such that the first element added is also the first removed.",1.0
727,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","stores a set of elements where the first element in, is the first element to be removed",1.0
728,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A data structure that removes nodes from the head and adds nodes at the tail.,1.0
729,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","a queue is a storage container that holds its objects in a first in, first out priority",1.0
730,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","The queue is another data structure. A physical analogy for a queue is a line at a bank. When you go to the bank, customers go to the rear (end) of the line and customers come off of the line (i.e., are serviced) from the front of the line.",1.0
731,enqueue and dequeue,Enqueue and Dequeue,1.0
732,enqueue and dequeue,Enqueue and Dequeue,1.0
733,enqueue and dequeue,enqueue - insert into queue dequeue - remove element,1.0
734,enqueue and dequeue,enqueue and dequeue,1.0
735,enqueue and dequeue,"enque ( Data ),  Deque ( )",1.0
736,enqueue and dequeue,enqueue and dequeue,1.0
737,enqueue and dequeue,"enqueue, dequeue",1.0
738,enqueue and dequeue,"enqueue, that adds an item to the queue dequeue, that takes the first item out of the queue",1.0
739,enqueue and dequeue,"Enqueue and dequeue, which add and remove elements from the queue",1.0
740,enqueue and dequeue,dequeue and enqueue,1.0
741,enqueue and dequeue,enqueue and dequeue,1.0
742,enqueue and dequeue,enqueue dequeue,1.0
743,enqueue and dequeue,rear and front,0.5
744,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",Keep track of the front and the back of the array as you increase and decrease the elements inside the array.,0.8
745,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","Declare the size of an array, and have special conditional statements (pointers) to make sure you re-use ALL of the array. Say, you have an array of 20 elements, you load up 18, then dequeue 3, when you enqueue 4 more elements, you want to loop back to index 0 and continue from there... this process saves resources.",0.9
746,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",you could use the first element of the list as the remove point and insert at the end f you do this you would have to shift the elements down each time you remove an item unless you make the array circular.,0.8
747,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","make an array of a size, and add on to the front and delete from the back, keep track of the two so that you know when it is full and where to add or subtract from",0.8
748,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","create a fixed array size, with with 2 integers to point to the beginning and the end of the que, and special cases to know when the que is empty or full.",0.8
749,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",Keep track of the front and rear indexes. Either: 1)Dequeue items by shifting the array left 2)Use wrapped configuration,0.8
750,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",fixed size array with max N elements.  Need to keep track of front and rear of array.,0.8
751,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","by keeping track of a front item and a rear item, or with a circular array that uses the modulo function",1.0
752,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","Using an array for a queue, the size of the array allocated limits the size of the queue. An array based queue class must keep track of both the front and back of the queue, which may need to wrap around the array.",1.0
753,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",remove the element then shift the elements one space back,0.6
754,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",By having the head pointer point to the first or least current data entered and having the tail point to the most current data entered. A method must be created so that the tail pointer doesn't leave the array.,1.0
755,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","your storage class has an array, and you keep track of the index of the first and last item in the array, and wrap around when end of the array is full",1.0
756,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",Boolean isFullQ(queue) ::= rear == MAX_QUEUE_SIZE-1,1.0
757,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",Have a pointer to the last element in the list and then use enqueue to insert items there. Link the first and last elements together to dequeue the list.,0.7
758,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",Enqueue to the end of the linked list... dequeue items from the beginning (head) of the list.,1.0
759,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",you use the first element in the list as the remove point for the queue and insert items at the end of the list.,1.0
760,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","make a linked list and add on to the front and delete from the back, keep track of both to do so.",0.9
761,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","fairly easy... singly linked list with a pointer to the head and tail of hte list.  deque first item in que, create temp pointer to next element, delete head, and then make head the temporary pointer.  enque new item, use pointer to end of list, add a new item to the next item of the tail, and make the tail the next item of the current tail.",0.9
762,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","Use a linked list with 2 pointers, one to the front and one to the back. As long as back != front, the queue is not empty.",0.9
763,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",linked list checking for front and rear.  Keep enqueueing elements until front equal to rear -1.,0.7
764,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","a queue can be implemented in a list by keeping track of two pointers, a head and a tail",0.9
765,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","each element of a queue can be allocated in the nodes of an linked list. New elements should be added to the head of the list, with each dequeued element coming off the tail.",1.0
766,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",remove the first element and reference the second element as the new head of the list.,0.7
767,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",By creating and adding nodes at the end of the list and removing the nodes from the beginning of the list.,1.0
768,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","your queue storage class has a list, and for enqueue, you add the item to the end of the list, and for dequeue you return the first item in the list",0.9
769,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",temp-&gt;next= NULL;       if (front)  { (rear) -&gt; next= temp;}       else front = temp;       rear = temp;   },0.7
770,push,The stack operation is almost the opposite of the enqueue operation.,0.5
771,push,push = enqueue pop = dequeue,0.9
772,push,push,1.0
773,push,push,1.0
774,push,"that would be the push operation, if it put the item at the end of the list.",1.0
775,push,push,1.0
776,push,push,1.0
777,push,enqueue corresponds with push dequeue corresponds with pop,0.9
778,push,"Push corresponds with enqueue, both very similarly place new elements into their stack or queue",1.0
779,push,push,1.0
780,push,Push,1.0
781,push,push,1.0
782,push,push,1.0
783,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A data structure that contains a root, internal nodes and external nodes. Each node references another node by means of pointers (pass-by-reference). The root is the ""base"" of the tree, it has no parents. A ""leaf"" is a node at the end of the tree which points to NULL.",1.0
784,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","an infinite set of nodes that have a root and descendants, and each addition is a leaf.",0.7
785,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A set of one or more nodes that are hierarchically organized, with one special “root” node.",0.8
786,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A tree is a data structure where nodes are linked to each other in a hierarchical manner.,0.7
787,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",It is a list of numbers in a list made by comparing values of nodes already in the tree and adding to the appropriate spot. Its a list made up of nodes with left and right pointers.,0.6
788,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","It organizes data in a nonlinear, hierarchical form, where items can have more than one successor.  Partitioned into a root node and subsets are general subtrees of the root. ",1.0
789,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A tree is a finite set of one or more nodes such that there is a specially designated node called the root. The remaining nodes are partitioned into n&gt;=0 disjoint sets T the n plus 1, where each element set is a tree.",1.0
790,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","a set of data arranged with pointers. each element can have many pointers, but no two pointers point to the same element",0.5
791,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A nonlinear, two-dimensional data structure.",0.4
792,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A type of data structure in which each element is attached to one or more elements directly beneath it.,0.8
793,The length of the longest path from the root to any of its leaves.,Height = the number of times you must progress down the levels of a tree to reach a leaf of the greatest distance from the root.,1.0
794,The length of the longest path from the root to any of its leaves.,The height is the number of generations (levels) from the root.,0.9
795,The length of the longest path from the root to any of its leaves.,The height of a tree is the number of levels between the root and the leaf farthest away from it.,1.0
796,The length of the longest path from the root to any of its leaves.,the distance from the deepest leaf to the root,1.0
797,The length of the longest path from the root to any of its leaves.,"The intensity of the children. Say you begin with one node, Thats one height. Then you add two children to that node and then two children to each of those nodes and two children to each of THOSE nodes. Youre current height would be 4.",0.6
798,The length of the longest path from the root to any of its leaves.,The number of nodes on the longest path from the root to the leaf.,1.0
799,The length of the longest path from the root to any of its leaves.,The height of a tree is the number of nodes on the longes path from the root to a leaf.,1.0
800,The length of the longest path from the root to any of its leaves.,the number of generations or levels the tree has,0.9
801,The length of the longest path from the root to any of its leaves.,The number of nodes on the longest path from the root to a leaf.,1.0
802,The length of the longest path from the root to any of its leaves.,The connections between elements are called branches. Trees are often called inverted trees because they are normally drawn with the root at the top.,0.3
803,A node that has no children.,And end point of the tree... a node that does not have any children.,1.0
804,A node that has no children.,A new item to the tree--a child,0.6
805,A node that has no children.,"A leaf is a node with children, it is a terminating node.",0.4
806,A node that has no children.,a leaf is a node with no children,1.0
807,A node that has no children.,The last value in the tree. A value with no children attatched.,1.0
808,A node that has no children.,A node with no children.,1.0
809,A node that has no children.,A leaf is a node with no children,1.0
810,A node that has no children.,an endpoint on a tree that contains no pointers or pointers that are set to null,0.9
811,A node that has no children.,A node with no children.,1.0
812,A node that has no children.,"The elements at the very bottom of an inverted tree (that is, those that have no elements below them) are called leaves.",1.0
813,A tree for which the maximum number of children per node is two.,A tree in which each parent has a maximum of 2 children.,1.0
814,A tree for which the maximum number of children per node is two.,a tree with up to two children or a right subtree and/or a left subtree,1.0
815,A tree for which the maximum number of children per node is two.,"A binary tree is a tree in which all nodes have a maximum of two degrees, or can only have two children each.",1.0
816,A tree for which the maximum number of children per node is two.,A binary search tree is a tree that also has the condition that each node may have at maximum 2 children,0.9
817,A tree for which the maximum number of children per node is two.,a list of numbers that are ordered compared to how they compare to the other numbers already added in the tree,0.4
818,A tree for which the maximum number of children per node is two.,"Starting at the root node, it branches off into one or two subsets that are binary subtrees of the root.  Each node has at most two children, the left child and the right child.",1.0
819,A tree for which the maximum number of children per node is two.,"A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node has at most two children, the left child and the right child.",1.0
820,A tree for which the maximum number of children per node is two.,a tree with elements that can contain at most two pointers,1.0
821,A tree for which the maximum number of children per node is two.,A tree where every node has no more than two children,1.0
822,A tree for which the maximum number of children per node is two.,A binary tree is a special type of inverted tree in which each element has only two branches below it.,0.9
823,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A tree which is split based on values. This makes it very easy to search. One can compare the desired value to the root, and if the root is greater than, we search the left side of the tree, if it is less than, we search the right side... and do the same thing recursively. ",1.0
824,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,a special binary tree that has a rule that all the subtrees on the right are smaller than the node value and all the subtrees on the left are larger than the node value,0.8
825,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"Binary search trees are similar to binary trees, but have been implemented to organize data in a specific way for later searching.",0.7
826,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A binary search tree is a tree that also has the condition that each node may have at maximum 2 children and where the input data is compared to the data in the tree starting with the root. If the value is smaller than the root it traverses left, if it is larger it traverses right until it becomes a leaf.",0.9
827,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,a tree that is set up so that it can be easily searched for numbers based on the location compared to the previous nodes.,0.7
828,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A binary tree where the value in any node n is greater than the value in every node n's left subtree, but less than every value in n's right subtree.",1.0
829,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,A binary search tree is a finite set of nodes that is either empty or consits of a root and two disjoint binary trees call the left and right subtrees.,0.5
830,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"a set of numbers arranged by links. each node can contain two pointers to other elements. each node to the left of the parent is smaller and each node to the right is larger. recursive implementation implies that if traversed in order, the output would be sorted",0.9
831,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,A tree in which the smaller values are located on the left of a parent node and the larger values are located on the right of the parent node.,1.0
832,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"Binary search trees are a fundamental data structure used to construct more abstract data structures such as sets, multisets, and associative arrays.",0.5
833,"Traverse the left subtree, then the root, then the right subtree.",(Left side of tree) (Root) (Right side of tree),1.0
834,"Traverse the left subtree, then the root, then the right subtree.","The in order is to go from left,root,right",1.0
835,"Traverse the left subtree, then the root, then the right subtree.","Inorder traversal of a binary tree will retrieve start at the furthest left hand leaf and checks it, it’s parent, and it’s right side sibling, then it goes up a level and repeats until it gets to the root.",0.9
836,"Traverse the left subtree, then the root, then the right subtree.",in order starts with the root then does right child then left child recursively,0.3
837,"Traverse the left subtree, then the root, then the right subtree.",it goes from lowest to highest inside of the tree,0.4
838,"Traverse the left subtree, then the root, then the right subtree.",It travels left to right,0.7
839,"Traverse the left subtree, then the root, then the right subtree.",void inorder(ptNode ptr) { if (ptr) { inorder (ptr-&gt;left); cout&lt;&lt;ptr-&gt;data; inorder(ptr-&gt;right); } },1.0
840,"Traverse the left subtree, then the root, then the right subtree.","a traversal that visits the left branch first, then the parent node, then the right branch, recursively.",1.0
841,"Traverse the left subtree, then the root, then the right subtree.","You traverse all the nodes to the left, then visit the root, then traverse all the nodes on the right.",1.0
842,"Traverse the left subtree, then the root, then the right subtree.","Level order traversal is a traversal method by which levels are visited successively starting with level 0 (the root node), and nodes are visited from left to right on each level, with Push and Pop methods. ",0.4
843,The height of the tree (or log of the number of elements in the tree).,Log(n),1.0
844,The height of the tree (or log of the number of elements in the tree).,Depends on what half of the tree and the levels you have.,0.7
845,The height of the tree (or log of the number of elements in the tree).,O(log n) in balanced trees,1.0
846,The height of the tree (or log of the number of elements in the tree).,O(nlog(n)),0.5
847,The height of the tree (or log of the number of elements in the tree).,logn,1.0
848,The height of the tree (or log of the number of elements in the tree).,O(n),0.6
849,The height of the tree (or log of the number of elements in the tree).,It takes at most 3 comparisons to find and element in a binary search tree,0.3
850,The height of the tree (or log of the number of elements in the tree).,it takes as many comparisons as the number of levels of the binary search tree. it only compares one number at each level,1.0
851,The height of the tree (or log of the number of elements in the tree).,log n comparisons,1.0
852,The height of the tree (or log of the number of elements in the tree).,2 way key comparison,0.2
853,Function members and data members.,"The elements typically included in a class definition are the function prototypes, usually declared public, and the data members used in the class, which are usually declared private.",1.0
854,Function members and data members.,"Class is user defined.  It contains members, data and functions.  The keyword class is used and includes brackets ({})",0.75
855,Function members and data members.,the functions and variables used when the object is defined for the class.,0.8
856,Function members and data members.,"Data members, functions and function definitions, variables.",1.0
857,Function members and data members.,"The elements that are included in a class definition is the access-modifier, data types, variables, and function signatures.",0.8
858,Function members and data members.,The variables and function prototypes.,0.8
859,Function members and data members.,The return value and the accepted value.,0.275
860,Function members and data members.,"A class definition typically includes the class name, the classes constructor(s), and any extra functions and class variables.",0.75
861,Function members and data members.,"data members, class variables, and functions",1.0
862,Function members and data members.,data members and function definitions,1.0
863,Function members and data members.,member functions and data members,1.0
864,Function members and data members.,"constructor, and function definitions.",0.6
865,Function members and data members.,class name data of class definition of functions and methods,0.875
866,Function members and data members.,"a constructor, private and public variables, and function prototypes",0.75
867,Function members and data members.,"Data variables and Functions, Data members",1.0
868,Function members and data members.,input  & return type elements,0.45
869,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","It divides the array into two halves, sorts each half, then merges the two halves together.",1.0
870,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Divide into two sublists and then those sublists break into length 1, then merges the sublists sorted. ",1.0
871,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",divides the line in half coninuously until you get to only a single value then recombine the values to form a sorted line.,1.0
872,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Continually split array in half, sort each side of the halves, then put them back together once organized.",1.0
873,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Merge sort breaks the array in half, and continues to do so until it has 2 elements to compare and sorts them, after doing so it ""merges"" back as it keeps on sorting the algorithm as it does so.",1.0
874,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Merge sort divides the problem in half, organizes each half, then brings the two halves together again.",1.0
875,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","A merge sort recursively divides the array into half until only one element remains, then it sorts the data on its way out of the recursive call by merging the cells.",1.0
876,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Merge sort recursively divides an array into two arrays until all arrays have 1 element, at which point it merges the 1 element arrays into larger sorted arrays, the final returned array being the sorted version of the initial array.",1.0
877,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","It takes an array, splits itself in half, sorts the two halves (either by recursion or iteration) and compares them together giving a third array a full sorted list with both halves rejoined. ",1.0
878,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","merge sort breaks the array down in halves until it is comparing two values, sorts those two values, then merges that back with the other broken down parts that it sorted, each level merging more sets together till you return back to your whole array in order.",1.0
879,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Divides the data into twor separate arrays, sorts the two arrays and merges them back to back together recursively. ",1.0
880,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Take the initial array and split it into two, temporary, smaller arrays, sort the two smaller arrays, and merge them back into a single array.",1.0
881,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort divides the data into halves until data of one element is reached and then merges each element together according to its placement in comparison to the rest of the data,1.0
882,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","divides an array in half and sorts each half by calling its self, thus dividing each half again and again and sorting it until the array is sorted. then putting the elements back in the original array sorted.",1.0
883,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",Merge sort takes an array and splits it in half and sends each half back to itself recursively and merges and sorts the two halves when it starts going back up.,1.0
884,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort splits an array of elements into smaller and smaller array's till the value of 1 is reached.,0.75
885,Private and public.,The access specifiers are public and private.,1.0
886,Private and public.,public private protected,0.975
887,Private and public.,public: the function or variable can be used outside the class private: the function or variable can only be used with the class,1.0
888,Private and public.,Public and Private,1.0
889,Private and public.,The access-specifiers that can be used in a C++ class definition is private and public.,1.0
890,Private and public.,public and private.,1.0
891,Private and public.,"Private, Public, Protected, or Friend.",0.975
892,Private and public.,"A C++ class definition may include access-specifiers public, private, and static.",0.9
893,Private and public.,"public, private",1.0
894,Private and public.,public - can be accessed by any of the program  private - can only be accessed by the class functions themselves and no outside functions or calls,1.0
895,Private and public.,"public , private, protected",1.0
896,Private and public.,public and private,1.0
897,Private and public.,"public, private, protected",0.975
898,Private and public.,public or private,1.0
899,Private and public.,public and private,1.0
900,Private and public.,public private protected,1.0
901,By using constructors.,not answered,0.0
902,By using constructors.,Objects are initialized by a value given.  When an object is defined for a certain task.,0.45
903,By using constructors.,objectname classname();  to call a function from the class:  objectname.funciton();,0.25
904,By using constructors.,"If the object refers to a class, the constructor(s) will initialize the objects based on return type and parameters passed. Compiler will auto-create one if one is not provided.",1.0
905,By using constructors.,Objects are usually initialized at the beginning of the program and are initialized usually in the main function. They are initialized after the class's name.,0.475
906,By using constructors.,"&lt;variable type&gt; &lt;variable name&gt;; or, if you want to initialize a variable to a certain value, &lt;variable type&gt; &lt;variable name&gt; = &lt;value&gt;;",0.475
907,By using constructors.,"When the object is initialized, its constructor is called (whether one is provided or c++ assigns a default constructor).",1.0
908,By using constructors.,"Objects are initialized essentially as copies of the corresponding classes, complete with their own separate variables.",0.5
909,By using constructors.,objects are initialized by stating the classname first then assigning a name to the object. Within the object's ( ) is a place where it can be initialized.,0.675
910,By using constructors.,"with the default constructor for that object in its class.  if no constructor is specified, it uses the default system constructor.",0.9
911,By using constructors.,initialized using the same name as the class,0.5
912,By using constructors.,they are initialized to a value dependent on the compiler,0.225
913,By using constructors.,memory is allocated in accordance with their type and initialization input.,0.35
914,By using constructors.,by giving them a value,0.325
915,By using constructors.,"By declaring the class first, the name of the variable, and then any variables that need to be put in the constructor.  Ex. Class myClass(x, y)",1.0
916,By using constructors.,"obj. are initialized by the variables that call them, when they are created within a class.   e.i. classname objectname etc. ",0.475
917,"The name of the function and the list of parameters, including their types.","A function signature is the return type of a function, its name, and the number and type of its parameters.",1.0
918,"The name of the function and the list of parameters, including their types.",function prototype that contains functions and data members.,0.6
919,"The name of the function and the list of parameters, including their types.",the declaration of the function.,0.5
920,"The name of the function and the list of parameters, including their types.","Includes the name, accepted parameters, and return type.",1.0
921,"The name of the function and the list of parameters, including their types.",The function signature tells what the function parameters and includes all the function calls,0.75
922,"The name of the function and the list of parameters, including their types.","The function's name, as well as what it returns and what it accepts.",1.0
923,"The name of the function and the list of parameters, including their types.",A function signature is the return type and accepted pass value type it takes,0.7
924,"The name of the function and the list of parameters, including their types.",A function signature specifies the name and input variables of a function.,1.0
925,"The name of the function and the list of parameters, including their types.",the name of the function and what it accepts/ returns,1.0
926,"The name of the function and the list of parameters, including their types.","its the scope, type, and parameters of that function that give it it's properties and defines it against other functions.",1.0
927,"The name of the function and the list of parameters, including their types.","is the name of the fuction, return type, and parameters that are being used",1.0
928,"The name of the function and the list of parameters, including their types.","a function signature should include the name of the function, parameters, and a body.",0.75
929,"The name of the function and the list of parameters, including their types.",the name of the function and the arguments passed to that function,1.0
930,"The name of the function and the list of parameters, including their types.",fuction name and parameters,1.0
931,"The name of the function and the list of parameters, including their types.","The parameters needed, the return type, and name of the function.",1.0
932,"The name of the function and the list of parameters, including their types.","function sig is, is what is the class recognizes as the main function, or rather its specification ",0.375
933,A function that calls itself.,not answered,0.0
934,A function that calls itself.,A base case that calls upon itself until the problem becomes smaller and terminates.,0.75
935,A function that calls itself.,a function that calls itself untill it reaches a base case.,1.0
936,A function that calls itself.,"A function that calls itself. Each time it does, it must get smaller, and eventually MUST converge to a base case, otherwise you can start an infinite loop.",1.0
937,A function that calls itself.,A recursive function is a function that calls itself. Usually called the base case. If the base case is not correct it causes a infinite loop.,1.0
938,A function that calls itself.,"A function that calls itself, in order to solve a problem.",1.0
939,A function that calls itself.,"A recursive function is a function that calls itself repeatedly until a base case is achieved. The fundamental idea is to break one large problem into a series of smaller, similar problems.",1.0
940,A function that calls itself.,"A recursive function typically simplifies a problem by calling itself, until arriving at a base case, at which it recursively returns a solution.",1.0
941,A function that calls itself.,a function that calls itself into a loop with a base case for a loop exit.,0.75
942,A function that calls itself.,a function that calls on itself and uses a base case to stop the recursion,1.0
943,A function that calls itself.,"a function that calls itself, and which eaach calls get closer and close to the base case.",1.0
944,A function that calls itself.,A function that divides and conquers a problem.  There is a base case that will eventually be reached.  The function calls itself over and over until the base case is satisfied.,1.0
945,A function that calls itself.,a function that calls itself in the definition code,1.0
946,A function that calls itself.,"a function that solves a problem by dividing the problem into smaller problems, by calling its self again and again, until a base case is reached.",1.0
947,A function that calls itself.,"A function that calls itself over and over again till a base case is reached, then it returns back to the original function.",1.0
948,A function that calls itself.,function that calls it self till the base case is met,1.0
949,Through iteration.,An alternative to solving a problem using recursive functions is to solve the problem using iteration.,1.0
950,Through iteration.,"Iteration, this would be more efficient and has repetition structure.",1.0
951,Through iteration.,iteration,1.0
952,Through iteration.,"Iteration. A while loop or a for loop will be able to accomplish the same desired outcome... It may be faster than recursion, but could also be harder to understand.",1.0
953,Through iteration.,Another alternative way to solve a problem instead of using recursive functions is by using iteration.,1.0
954,Through iteration.,"A recursive function can often be solved using an iterative function, which runs faster, but is often more complicated.",1.0
955,Through iteration.,Any recursive function can be solved using an iterative method.,1.0
956,Through iteration.,"Many recursive solutions may also be solved with looping control statements, such as while, for, do-while, etc.",0.8
957,Through iteration.,iteratively,1.0
958,Through iteration.,iteration is the alternative way to solve a problem,1.0
959,Through iteration.,using an iterative solution instead,1.0
960,Through iteration.,"Using an iterative solution.  For, while, or do while loop.",1.0
961,Through iteration.,the alternative way to solve a problem that could be solved using recursion is iteration.,1.0
962,Through iteration.,"itteration, like a for loop, a while loop, or a do while loop",1.0
963,Through iteration.,Iteration by using loops,1.0
964,Through iteration.,"the alt, way is to use a functions parameter in a call ""to"" function. ",0.5
965,The static arrays are intialized only once when the function is called.,Arrays declared as static are not created and initialized when a function is called and destroyed when the function terminates.,1.0
966,The static arrays are intialized only once when the function is called.,Static can be initialized and non-static cannot in C++.,0.5
967,The static arrays are intialized only once when the function is called.,a static array will be called only once. once it has been declared the complier will ignore the static line if it comes to it again.,0.85
968,The static arrays are intialized only once when the function is called.,"The static array will be available to the whole of the program, whereas an array that is not static is only available within the scope in which it is declared.   //pass-by-reference???",0.725
969,The static arrays are intialized only once when the function is called.,An array that is declared static causes anything that is not initialized to be set to 0.,0.475
970,The static arrays are intialized only once when the function is called.,A static array will have a null character at the end of the array.,0.5
971,The static arrays are intialized only once when the function is called.,An array they is declared as static can be accessed outside of the method it was declared without passing it as an argument to other functions in the same class.,0.6
972,The static arrays are intialized only once when the function is called.,"A static array has class scope, allowing it to remain where other arrays might be recycled.",0.825
973,The static arrays are intialized only once when the function is called.,"one declared as static is one that is already defined. The program knows the length and the array from the start, whereas non-static arrays are declared or assigned later.",0.575
974,The static arrays are intialized only once when the function is called.,"a static array is one that keeps its values and is not initialized every time a class function is called, it's data is not lost at function end.",0.9
975,The static arrays are intialized only once when the function is called.,an array that is declared as static can only be used in the function that its being called in. Its a constant array. Static is another way of say const.,0.45
976,The static arrays are intialized only once when the function is called.,Values in an array that is not delcared as static will remain constant.  When an array is declared const values within the array can be manipulated.,0.425
977,The static arrays are intialized only once when the function is called.,the data of a static array cannot be changed,0.425
978,The static arrays are intialized only once when the function is called.,static arrays can be called from anywhere,0.425
979,The static arrays are intialized only once when the function is called.,A static array cannot be changed. A regular array can be changed when it is passed to a function or manually.,0.425
980,The static arrays are intialized only once when the function is called.,static has a predetermined size that cannot be passed while vis versa.,0.575
981,The char[] will automatically add a null \0 character at the end of the string.,The programmer must provide the null terminating character in a string of characters using type char[] and must also ensure that the array is large enough to contain the input string of characters and the null terminating character.,1.0
982,The char[] will automatically add a null \0 character at the end of the string.,String of characters are followed by a null statement.  type string is for example   string s;,1.0
983,The char[] will automatically add a null \0 character at the end of the string.,a string is a variable with a single entinty of letters combined into one while in a char[] each letter is assigned a memory value and each has its own variable assigned i.e. char[0] char[1].,0.4
984,The char[] will automatically add a null \0 character at the end of the string.,"A string contains a null character at the end of the string, which makes it easily possible to get the string length. A char array can have a virtually unlimited length, therefore, its size must be declared/limited.",0.75
985,The char[] will automatically add a null \0 character at the end of the string.,The difference is that a string that is declared a variable of type char[] is each char is included in the array versus the string of characters that is read into a variable.,0.375
986,The char[] will automatically add a null \0 character at the end of the string.,"An array of strings reads the string literals, meaning anything within ""quotes"". A char array reads a string as each individual character.",0.375
987,The char[] will automatically add a null \0 character at the end of the string.,The character array has an end of line character at the end of it.,0.95
988,The char[] will automatically add a null \0 character at the end of the string.,"Type char[] may contain a null value as the last element, whereas type string will not.",1.0
989,The char[] will automatically add a null \0 character at the end of the string.,the one that is type string has an extra string member. The /0 at the end.,0.75
990,The char[] will automatically add a null \0 character at the end of the string.,"char array needs an end character signature and is made up of characters each separate from each other, a string is an object in itself, with a value that the user enters.",1.0
991,The char[] will automatically add a null \0 character at the end of the string.,"the variable of type char[], each character is stored into a different memory address and can be accessed easly, where as in a string of character, its not easy to be able to access each character in the string.",0.4
992,The char[] will automatically add a null \0 character at the end of the string.,"When the string is passed into the array char, individual characters are stored and can be manipulated.  Although when a word is stored into a string variable, it is stored as one word and not as individual characters.",0.4
993,The char[] will automatically add a null \0 character at the end of the string.,"a string variable can change in size and is passed to functions by value, whereas a type char[] cannot change in size and is passed to functions by reference only",0.375
994,The char[] will automatically add a null \0 character at the end of the string.,"an array of characters has one more element, its last element,the terminating element, or null, which doesnt exist in a variable of type string",1.0
995,The char[] will automatically add a null \0 character at the end of the string.,A string of characters is a specific variable type that has no extra data at the end. A string of type char[] is all the characters and a null ('\0'),1.0
996,The char[] will automatically add a null \0 character at the end of the string.,"string of characters that is read into a variable of type string includes, ",0.3
997,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",The divide and conquer paradigm divides a problem into smaller and smaller portions that are easier to solve.,0.85
998,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Divide elements,recur then conquer, which works in merge sort and quicksort.",0.75
999,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",to divide one larger string/line of values and sepereate them into smallers lines to easily manipulate them and then replace them in the order in which they should be.,0.7
1000,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Split the problem into smaller, more manageable parts, and proceed to address the smaller problems.",0.85
1001,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",The divide-and-conquer technique is where it takes the sorting algorithm and breaks up the array into smaller elements of the array to tackle the problem and run the algorithm.,0.825
1002,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","The divide-and-conquer paradigm divides the problem into two pieces and works on each piece separately, allowing for a faster approach to 2 separate smaller problems. ",0.85
1003,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",The idea is to split the problem into half and solve for the smaller split-problems.,0.85
1004,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","The divide and conquer paradigm, splits a large problem into simpler problems, at which point it solves the simpler problems and merges the simple solutions together to answer the large problem.",1.0
1005,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","It takes a large problem and splits it into two or more easier or faster solutions, and  makes for better readability. ",0.85
1006,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","smaller parts are easier to compare than comparing the whole, so it divides the problem down in halves until it can easily compare, then works backwards putting it back together to give the solution.",1.0
1007,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","a divide-and-conquer paradigm. takes some data, divides it into two parts, and works on each part indiviually until the item is found.",0.85
1008,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","The idea of divide and conquer is to take a large problem, split it into n smaller problems, making the program easier to read and modify.",0.85
1009,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",the divide and conquer paradigm is a recursive solution that keeps dividing the problem into halves until a base case is reached.,0.85
1010,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","divide the array in half, sort each half, then sort them back in one array",0.6
1011,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",You take a class and break down everything it is supposed to do into easily managed functions.,0.55
1012,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",it is the separating of large program into smaller classes then until target is reached.,0.65
1013,The address of a location in memory.,A pointer is a variable that holds a memory address or location of another variable.,1.0
1014,The address of a location in memory.,A data type that points to an address in memory which contains certain information. Used for pass-by-reference to save memory.,1.0
1015,The address of a location in memory.,a pointer points to a location in memory of a certain data type,0.95
1016,The address of a location in memory.,A pointer is a variable that holds the address of a given variable (and of a given data type),1.0
1017,The address of a location in memory.,Its like a variable except it only holds the address in memory of the variable not the physical information.,1.0
1018,The address of a location in memory.,its a data type with a memory address and a value,0.65
1019,The address of a location in memory.,it contains a object's memory address,1.0
1020,The address of a location in memory.,A pointer is an element that references a memory location.,1.0
1021,The address of a location in memory.,"an object that points to a specific place in memory, where a variable or value is stored.",1.0
1022,The address of a location in memory.,a variable that stores the address of a memory location,1.0
1023,The address of a location in memory.,a pointer points to a location in memory where data is stored,1.0
1024,The address of a location in memory.,a variable that holds the address of another variable and can access the contents of the variable.,1.0
1025,The address of a location in memory.,A data type that stores the memory address of another variable.,1.0
1026,The address of a location in memory.,its like a variable but only holds an address in meomrry not the physical address.,0.6
1027,The height of the tree.,It is the same as the height of the tree.,1.0
1028,The height of the tree.,"Given n elements, it would take n/2 steps to find the search criteria.",0.3
1029,The height of the tree.,log n,0.95
1030,The height of the tree.,2^n where n is the # of levels the binary tree has,0.375
1031,The height of the tree.,log(n),0.95
1032,The height of the tree.,"N, n being the number of nodes.",0.75
1033,The height of the tree.,log(n),0.95
1034,The height of the tree.,3 steps at most.  There are 3 cases.,0.3
1035,The height of the tree.,log(n)    where n equals the total number of nodes in the tree.,0.95
1036,The height of the tree.,the same number of steps as the number of levels or generations in the tree,1.0
1037,The height of the tree.,log n,0.95
1038,The height of the tree.,( n(n-1) ) / 2,0.3
1039,The height of the tree.,"it takes at most h steps, where h is the height of the tree.",1.0
1040,The height of the tree.,it depends on the install search tree then from there for whatever the case is the it repeats it back along the case of the primary node,0.3
1041,Implement the algorithm and measure the physical running time.,Using some sort of counting principle of the number of operations performed in an algorithm.,0.875
1042,Implement the algorithm and measure the physical running time.,Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters.,1.0
1043,Implement the algorithm and measure the physical running time.,measuring the relationship of running an algorithm with different input sizes.,0.875
1044,Implement the algorithm and measure the physical running time.,not answered,0.0
1045,Implement the algorithm and measure the physical running time.,keep a value of how many operations it takes and add to this value each time a function is called.,0.675
1046,Implement the algorithm and measure the physical running time.,to run the program through and see how many times each thing is called and the runtime of each function is based on that.,0.85
1047,Implement the algorithm and measure the physical running time.,"For every call into memory, add/ multiply it into an equation of type O(n)",0.45
1048,Implement the algorithm and measure the physical running time.,Big O(h) notation,0.45
1049,Implement the algorithm and measure the physical running time.,the experimental approach measures actual running time in t.  t= seconds.,1.0
1050,Implement the algorithm and measure the physical running time.,running an algorithm on a specific set of data,0.8
1051,Implement the algorithm and measure the physical running time.,to measure the actual time of the program to run. and calculate the running time using the input and operations done,1.0
1052,Implement the algorithm and measure the physical running time.,adding up the number of operations performed based on the worst case possible.,0.5
1053,Implement the algorithm and measure the physical running time.,"trying it with different sets of inputs, and measuring the amount of time that the algorithm actually takes.",1.0
1054,Implement the algorithm and measure the physical running time.,running the input with various inputs measuring the running time with  system time,0.875
1055,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort is a sorting algorithm that divides a list in half and has two lists. It then compares the first elements in both these lists and puts these elements in another list, having the smaller element before the bigger one.",0.4
1056,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Iterate through the list (assume list of integers), find the smallest one, and put it in a separate ""sorted"" list... then traverse again and find the next smallest, and move it to the sorted section... and repeat until you run out of elements to sort.",0.95
1057,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort selects the smallest element out of the list then the second smallest ....and sorts them acordingly.,1.0
1058,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","A selection sort scrolls through the data structure looking for the lowest (or highest) unsorted piece of data, moves it to the held spot, increments that spot by one, and starts the process over.",1.0
1059,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","goes to the middle of the list, checks to see if it is greater or less then the value given and moves through the list accordingly to add the value into the proper place.",0.375
1060,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",it runs through the list and finds the smallest (or largest) value and puts it at the appropriate position,0.875
1061,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",It takes the largest item in the unsorted array and swaps it with last item in the unsorted array.,0.875
1062,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sorts works by going through a certain list. Goes through the unsorted list and selecting the largest item in the list and placing it in a sorted array. There are two arrays, unsorted and sorted. Complete these steps until the list is sorted.",0.875
1063,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","selection sort works by pulling all of the values off to the side, leaving one value in the list.  It will then insert a value into the list.  if the value is bigger it will go to the right, if smaller if will go to the left.",0.475
1064,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort searches for the smallest element of the remaining data organization and places it at the largest point of the new data organization,0.875
1065,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","it selects the smallest element in a list and switches it with the element in its correct position, then it selects the next smallest and does the same...",0.925
1066,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",It starts at the first element and replaces it with the smallest element found to the right. It then repeats with the next element in the list.,0.925
1067,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","it searches through the entire data set for the best element to go in the current position, then it moves up a position and searches through the remainder of the set for the best element for the new position.",0.8
1068,"It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort  iterates through the array one element @ a time searching for the right and replacing current value with it.,0.8
1069,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked Lists can be of variable size, where arrays have fixed size.",1.0
1070,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked lists do not have a definite size. They can be as big or as small as needed, and they don't have to allocate extra memory for elements you don't need. Arrays size must be defined.",1.0
1071,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","a linked list has a dynamic size , but an array only has a fixed size and takes allot of extra operations to increase its size.",1.0
1072,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",The main advantage to a linked list is that it can have it's size adjusted during runtime.,1.0
1073,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",There is no predetermined length,1.0
1074,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","linked lists have an indefinite size, whereas arrays are a specific size.",1.0
1075,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","They grow dynamically, unlike the fixed size array",1.0
1076,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",Linkded list does not have a fixed size. Arrays have a fixed size.,1.0
1077,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked lists have a dynamic size, where as arrays have a static size.",1.0
1078,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",linked lists do not have a memory constraint other than total memory,1.0
1079,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",they are resizeable,1.0
1080,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",Linked lists can be dynamically allocated and their size can change as needed.,1.0
1081,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","they dont have a fixed size, no shiftnig needs to be done for insertion/deletion.",1.0
1082,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",linked list many be dynamically grown. It has not limit,1.0
1083,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A queue is an abstract data type that involves putting an element at the back of the list. Queues use the FIFO, first in first out, idea where the first element in the list is the first that comes out.",1.0
1084,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A data structure that implements first in, first out. The element that has been there the longest is the first to get served.",1.0
1085,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,a data structure that inserts elements at the end of it and removes elements from the front.,1.0
1086,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A queue is a data structure that inserts data into a FIFO configuration, that is, data input to the structure is always at it's end, and data taken is always from the beginning.",1.0
1087,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,like a linked list except it is first in last out,0.5
1088,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"its a lot like a stack, except that the first item put into the list is the first item to be taken from the list.",1.0
1089,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A linked list with a First In, Out structure dequeue at the head of the list enqueue at the end of the list",1.0
1090,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is an abstract data type that is based off of the priniple of first in first out. FIFO. The first item inserted into the list will the first item taken out.,1.0
1091,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"It is a ""first in first out"" data structure.  It can be implemented with either a linked list or an array.",1.0
1092,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,an ordered list that performs task in the order of first in first out. adding items to the queue places items behind the rest of them. taking items off the queue takes the one that has waited the longest.,1.0
1093,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,a queue is a set of elements where the first element inserted is the first element to be removed,1.0
1094,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,Is a list of items where the the user only has access to the first element and each new element is added at the end.,1.0
1095,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A queue is a data structure that holds a set of objects, which has a FIFO (first in first out) priority.",1.0
1096,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,like a linked list expect first in last out,0.25
1097,push and pop,The Push function and the Pop function.,1.0
1098,push and pop,push and pop,1.0
1099,push and pop,push - puts an element on the stack pop- takes an element off the stack,1.0
1100,push and pop,Push and Pop,1.0
1101,push and pop,pop and push,1.0
1102,push and pop,"pop, push",1.0
1103,push and pop,push and pop,1.0
1104,push and pop,"The main operations in a stack are push and pop. Push adds an item to the top of the stack, pop removes the top item from the stack.",1.0
1105,push and pop,push and pop,1.0
1106,push and pop,"push, which adds an item to the top of the stack, and pop, which takes the first item off the top to the stack",1.0
1107,push and pop,pop and push to remove an element and to insert an element,1.0
1108,push and pop,"Push, Pop",1.0
1109,push and pop,push - Add an element to the top of the stack pop - remove the top element from the stack,1.0
1110,push and pop,push and pop,1.0
1111,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","It is a tree that shows how it functions. It contains parents, children, siblings, ancestors and descendents. The use of tree type algorithm is also an alternative sorting algorithm. ",0.375
1112,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","Start from the root, circle around the _whole_ ""tree"", naming each node as you see it.",0.925
1113,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",it is where you visit the parent then you vistit the children,0.3
1114,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","Traversing a tree down to it's terminal child and then all of it's siblings, then it traverses up the terminal child's parent and all of it's siblings (repeating the first step if those siblings have children) until the root node has been visited.",0.825
1115,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",children to root,0.375
1116,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",it runs through the parents and the children in order,0.55
1117,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","Travel from the root to the farthest left child Backup, travel the leftmost children in the right side repeat until reaching the rightmost child.",0.85
1118,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","The Euler traveral is when you go through a tree looking for nodes to put in the order of left, root, right. Like inOrder traversal. ",0.75
1119,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","An Euler traversal is a traversal that begins with the root, and travels around the outside of the tree.  Each element in the tree is visited 3 times.  From the left, from the bottom and from the right.",1.0
1120,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",Euler tour traversal of a tree traverses down each branch straight to one leaf then starts again at the root and repeats until all elements have been traversed.,0.775
1121,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",to traverse going down to the left then go to the right of last children and back to the top.. kind of like going around the tree,0.95
1122,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","You recursively visit every node on the list. You visit the node from the left, the bottom, and from the right.",1.0
1123,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",traversing a tree level by level,0.3
1124,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",The Euler traversal through the tree in a rubber band style shape.,0.65
1125,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","If you delete a node from a tree, you have to link that nodes parents to the children of that node.",0.625
1126,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","Must delete the information that the node contains (to free up memory/ ""garbage collect"") and also delete the pointer (in that node's ""parent"") that points to the node you wish to delete.",0.35
1127,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree.,1.0
1128,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",Link the to-be-deleted's left child to the to-be-deleted's parent's left child pointer.,0.85
1129,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",delete node;,0.3
1130,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",It all depends on where the node is located. If its a child it can just be deleted but for a node inside the tree it must be replaced with another node that works in its place.,0.675
1131,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",Create a temp Node  Set temp's values to the Node after head  or NULL in the case of only head Node in the list.   Set head equal to temp. Delete temp,0.375
1132,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","Set the nodes to NULL, where that it doesn't point to anything, and the use the DELETE opertator to clear space from memory.",0.3
1133,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","You must first traverse the tree to find the appropriate value.  Then you must make sure that the node is a leaf node.  If it is, then you can delete the pointer to that specific node.",0.525
1134,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","if the node is a leaf, you set it's parent's pointer to null. if the node is in the tree you must replace the node with one in the tree: either the largest in the left of the tree or the smallest in the right of the tree. this can be done recursively if needed.",1.0
1135,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",you cannot delete a node because that can cause a node to have more than 2 children,0.25
1136,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","You search the tree for the node using recursion. When you find the node, you determine whether it is a leaf or a internal node. If it is a leaf, you just delete it and set the parent pointer to that node to NULL. If it is a  node, you replace the node with either of the children nodes.",0.725
1137,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","if it has no children, you just delete it. if it only has one child, just replace the node with whichever child it has. if it has both children, replace it with one of its children, and send the other child down along the other side of the new node.",0.725
1138,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",pointer to the child and delete it has 2 children set the node to the child and delete it. the node to th middle will then take its place,0.575
